{"mappings":"AAuUwJ,MAqzBlJA,EADQ,CAAC,IAAI,IAAI,KACLC,QAAQ,MACpBD,EACFE,QAAQC,IAAI,OAEZD,QAAQC,IAAI,MAEhBD,QAAQC,IAAIH,GACZE,QAAQC,QAAQH,EAAM,IACtBE,QAAQC,OAAOH,GACfE,QAAQC,IAAIC,SAASJ,KA4SR,CACTK,KAAM,QACNC,IAAK,GACLC,UAAW,CACPC,MAAM,EACNC,KAAK,EACLC,IAAI,EACJC,aAAa,GAEjBC,WACIV,QAAQC,IAAI,WAAWU,KAAKR,O,EAEhCS,QAII,MAAMC,EAAOC,OAAOD,KAAKF,MACzB,IAAI,MAAMI,KAAOF,EACW,mBAAdF,KAAKI,IAGXf,QAAQC,IAAIc,GAGpBf,QAAQC,IAAIY,E,IAgBfD","sources":["src/js/task-21.js"],"sourcesContent":["// if(){\n\n// }else{\n\n// }\n\n// if(4>5){ //4>5 => false\n//     console.log('true');\n// }else{\n//     console.log('false');\n// }\n// const value = 7\n\n// if (value > 5) { // 7> 5 => true\n//     console.log('4>5');\n// } else if (value > 6) {\n//     console.log('4>6');\n// } else if (value > 3) {\n//     console.log('4>3');\n// } else {\n//     console.log('else');\n// }\n\n// const value = '';\n// if (value) { //0 => false\n//     console.log('if');\n// } else {\n//     console.log('else');\n// }\n\n\n// condition ? exmple 1 : example 2\n\n\n// const result = 7 > 6 ? 'більше' : 'меньше';\n\n// let result;\n\n// if (7 > 6) {\n//     result = 'більше';\n// } else {\n//     result = 'меньше';\n// }\n\n// console.log(result);\n\n\n\n// const result = 10 + 5;\n// console.log(result);\n// console.log(testValue);\n// const value = 5;\n// if (value === 1) {\n//     console.log('one');\n// } else if (value === 2) {\n//     console.log('two');\n// } else if (value === 5) {\n//     console.log('Good result');\n// } else {\n//     console.log(\"default\")\n// }\n\n// switch (value) {\n//     case 1:\n//         console.log('one');\n//         break\n//     case 2:\n//         console.log('two');\n//         break\n//     case 5:\n//         console.log('Good result');\n//         break\n//     default:\n//         console.log(\"default\")\n// }\n\n// const a = 'name';\n// switch (a) {\n//     case 'age':\n//         console.log('one');\n//         break;\n//     case 'name':\n//         console.log('two');\n//         break;\n//     case 'city':\n//         console.log('Good result');\n//         break;\n//     default:\n//         console.log(\"default\")\n// }\n\n\n// const let\n\n// var\n\n// 1 Глобальна\n// 2 Блочна\n// 3 Функціональна\n\n\n// \n// Блочна\n// {\n\n// }\n\n\n// Функціональна\n// function(){\n\n// }\n\n\n\n// const a = 15;\n\n// if (true) {\n//     console.log(a);\n// }\n\n// if(true){\n//     var b = 22;\n// }\n// console.log(b);\n\n// function foo() {\n//     console.log(a);\n//     var b = 22;\n// }\n// console.log(b);\n\n\n// в глобальні\n// let a = 15;\n\n// if (true) {\n//     // Блочна\n//     let a = 1;\n//     a = 25;\n// }\n\n// console.log(a);\n\n// глобальна\n// let a = 15;\n\n// if (true) {\n//     // звернення до ініціалізації\n//     a = 25;\n//     let a = 1;\n// }\n\n// console.log(a);\n\n// глобальна\n// let a = 10;\n\n\n// if (true) {\n//     // блочна\n//     a = 15;\n//     if (true) {\n//         a = 25\n//     }\n// }\n// console.log(a);\n\n// if(true){\n//     // блочна\n//     let a = 15;\n//     if(true){\n//         a = 25\n//     }\n// }\n// console.log(a);\n\n// if(true){\n//     // блочна\n//     let a = 15;\n//     if(true){\n//         a = 25\n//     }\n//     console.log(a);\n// }\n\n\n// let a = 15;\n\n\n// if (true) {\n//     // блочна\n//     a = 15;\n//     if (true) {\n//         let a = 25\n//     }\n// }\n// console.log(a);\n\n// let b = 25;\n\n// if (true) {\n//     // блочна\n//     let a = 15;\n//     b = 44;\n//     if (true) {\n//         a = 25\n//         b = 31\n//     }\n//     a = 44\n//     console.log(b);\n// }\n// console.log(a);\n\n\n\n\n\n// for (let i = 0; i < 5; i+=1){\n//     console.log(i);\n// }\n//  12345\n// const str = 'hello world';\n//          //  01234\n// for(let i = 0; i < str.length; i+=1){\n//     console.log(str[i]); //0,1,2,3,4,5,6\n// }\n\n\n\n// while(true){\n//     console.log('hello world');\n// }\n\n\n// const str = 'hello world';\n\n\n// let i = 0;\n// while (i < str.length) {\n//     if(str[i] === 'w'){\n//         console.log('yes');\n//         break;\n//     }\n//     console.log('no', str[i]);\n//     i += 1;\n// }\n\n// const str = 'hello world';\n// let i = 15;\n// do {\n//     if (str[i] === 'w') {\n//         console.log('yes');\n//         break;\n//     }\n//     console.log('no');\n//     i += 1;\n// } while (i < str.length)\n\n\n\n\n\n// Example 1 - Введення користувача та розгалуження\n\n// Використовуючи конструкцію if..else та prompt, напиши код, який питатиме: \"Яка офіційна назва JavaScript?\". Якщо користувач вводить ECMAScript, то показуй alert з рядком \"Правильно!\", в іншому випадку - \"Не знаєте? ECMAScript!\"\n\n// const value = prompt(\"Яка офіційна назва JavaScript?\");\n// if (value === 'ECMAScript') {\n//     alert(\"Правильно!\")\n// } else {\n//     alert(\"Не знаєте? ECMAScript!\")\n// }\n\n\n// Example 2 - Відображення часу (if...else)\n// Напиши скрипт для відображення годин та хвилин у консолі браузера у вигляді рядка формату \"14 г. 26 хв.\". Якщо значення змінної minutes дорівнює 0, то виводь рядок \"14 г.\", без хвилин.\n\n// const hours = 14;\n// const minutes = 1;\n// let timestring;\n\n// if (minutes) {\n//     console.log(`${hours} г. ${minutes}хв.`);\n// } else {\n//     console.log(`${hours} г.`);\n// }\n\n\n\n// Example 3 - Розгалуження\n// Напиши скрипт, який виводить у консоль рядок \"Це позитивне число\", якщо у prompt користувач ввів число більше нуля. Якщо було введено нуль, виводь в консоль рядок \"Це нуль\". Якщо передали від'ємне число, у консолі повинен бути рядок \"Це негативне число\".\n\n// const userInput = Number(prompt('Введіть число'));\n// console.log( typeof userInput);\n// if (!userInput) { // 0 =>! + false => true\n//     console.log(\"Це нуль\");\n// } else if (userInput > 0) {\n//     console.log(\"Це позитивне число\");\n// } else {\n//     console.log(\"Це негативне число\");\n// }\n\n// const userInput = Number(prompt('Введіть число'));\n// if (userInput % 2) {\n//     console.log(\"Не парне\");\n// } else {\n//     console.log('Парне');\n// }\n\n\n// console.log(userInput % 2 ? \"Не парне\" : 'Парне');\n\n// if (0) { //=> false\n\n// } else {\n//     console.log('в мене нуль');\n// }\n\n// if (!0) { //=> false\n//     console.log('в мене нуль');\n// }\n\n\n// Example 4 - Вкладені розгалуження\n// Напиши скрипт, який порівнює числа у змінних a та b. Якщо обидва значення більше 100, то виведи в консоль максимальне з них. В протилежному випадку у консолі повинна бути сума значення b та числа 512.\n\nconst a = 120;\nconst b = 180;\n// if (a > 100 && b > 100) {\n//     if (a > b) {\n//         console.log(a);\n//     } else {\n//         console.log(b);\n//     }\n// } else {\n//     console.log(b + 512);\n// }\n// if (a > 100 && b > 100) {\n//     console.log(a > b ? a : b);\n// } else {\n//     console.log(b + 512);\n// }\n\n// Example 5 - Форматування посилання (endsWith)\n// Напиши скрипт який перевіряє чи закінчується значення змінної link символом /. Якщо ні, додай до кінця значення link цей символ. Використовуй конструкцію if...else.\n\n// let link = 'https://my-site.com/about';\n// // // Пиши код нижче за цей рядок\n// if(!link.endsWith('/')){\n//     link +='/';\n// }\n// // // Пиши код вище за цей рядок\n// console.log(link);\n\n\n\n// Example 6 - Форматування посилання (includes та логічне «І»)\n// Напиши скрипт який перевіряє чи закінчується значення змінної link символом /. Якщо ні, додай до кінця значення link цей символ, але тільки в тому випадку, якщо в link є підрядок \"my-site\". Використовуй конструкцію if...else.\n\n// let link = 'https://somesite.com/about';\n// // // Пиши код нижче за цей рядок\n// if(!link.endsWith('/') && link.includes(\"my-site\")){\n//     link +='/';\n// }\n// // // Пиши код вище за цей рядок\n// console.log(link);\n\n\n\n// Example 7 - Форматування посилання (тернарний оператор)\n// Виконай рефакторинг коду задачі номер 4, використовуючи тернарний оператор.\n\n// let link = 'https://my-site.com/about';\n// // if (link.includes('my-site') && !link.endsWith('/')) {\n// //     link += '/';\n// // }\n// console.log(link.includes('my-site') && !link.endsWith('/') ? link += '/' : link);\n\n\n\n// Example 8 - if...else та логічні оператори\n// Напиши скрипт який виводитиме в консоль браузера рядок залежно від значення змінної hours.\n\n// Якщо значення змінної hours:\n\n// менше 17, виводь рядок \"Pending\"\n// більше або дорівнює 17 і менше або дорівнює 24, виводь рядок \"Expires\"\n// більше 24 , виводь рядок \"Overdue\"\n// const hours = 19;\n\n// if (hours < 17) {\n//     console.log(\"Pending\");\n// } else if (hours >= 17 && hours <= 24) {\n//     console.log(\"Expires\");\n// } else {\n//     console.log('Overdue');\n// }\n\n\n// Example 9 - Дедлайн здачі проекту (if...else)\n// Напиши скрипт для відображення часу дедлайну здачі проекту. Використовуй конструкцію if...else.\n\n// Якщо до дедлайну 0 днів - виведи рядок \"Сьогодні\"\n// Якщо до дедлайну 1 день - виведи рядок \"Завтра\"\n// Якщо до дедлайну 2 дні - виведи рядок \"Післязавтра\"\n// Якщо до дедлайну 3+ днів - виведи рядок \"Дата у майбутньому\"\n// const daysUntilDeadline = 2;\n// // // Пиши код нижче за цей рядок\n// if (!daysUntilDeadline) {\n//     console.log(\"Сьогодні\");\n// } else if (daysUntilDeadline === 1) {\n//     console.log(\"Завтра\");\n// } else if (daysUntilDeadline === 2) {\n//     console.log(\"Післязавтра\");\n// } else {\n//     console.log(\"Дата у майбутньому\");\n// }\n\n\n\n// Example 10 - Дедлайн здачі проекту (switch)\n// Виконай рефакторинг коду задачі номер 5 використовуючи switch.\n\n// const daysUntilDeadline = -1;\n\n// // if (daysUntilDeadline === 0) {\n// //   console.log('Сьогодні');\n// // } else if (daysUntilDeadline === 1) {\n// //   console.log('Завтра');\n// // } else if (daysUntilDeadline === 2) {\n// //   console.log('Післязавтра');\n// // } else {\n// //   console.log('Дата у майбутньому');\n// // }\n\n// if (daysUntilDeadline >= 0) {\n//     switch (daysUntilDeadline) {\n//         case 0:\n//             console.log('Сьогодні');\n//             break;\n//         case 1:\n//             console.log('Завтра');\n//             break;\n//         case 2:\n//             console.log('Післязавтра');\n//             break;\n//         default:\n//             console.log('Дата у майбутньому');\n//     }\n// } else {\n//     console.log(\"Друже ти проспав\");\n// }\n\n\n\n// Example 11 - Цикл for\n// Напиши цикл for, який виводить у консоль браузера числа за зростанням від min до max, але тільки якщо число кратне 5.\n\n// const max = 100;\n// const min = 20;\n// !min => 20 => true => !true=> false\n// // 1 ''\n// // 2 0\n// // 3 null\n// // 4 undefined\n// // 5 NaN\n// // 6 false\n\n\n// const max = 100;\n// const min = 20;\n\n// for (let i = min; i >= min && i <= max; i += 1) {\n//     if (!(25 % 5)) { //25 % 5 => 0 => false => !false => true\n//         console.log(i);\n//     }\n// }\n\n\n\n\n\n\n// Example 12 - Введення користувача та розгалуження\n// Напиши скрипт, який питатиме логін за допомогою prompt та логувати результат у консоль браузера.\n\n// Якщо відвідувач вводить \"Адмін\", то prompt запитує пароль\n// Якщо нічого не введено або натиснуто клавішу Esc - вивести рядок \"Скасовано\"\n// В іншому випадку вивести рядок \"Я вас не знаю\"\n// Пароль перевіряти так:\n// Якщо введено пароль \"Я адмін\", то вивести рядок \"Доброго дня!\"\n// Інакше виводити рядок \"Невірний пароль\"\n\n// const login = prompt(\"Тут має бути ЛОГІН\");\n// if(!login){\n//   console.log(\"Скасовано\");  \n// }else if(login === \"Адмін\"){\n//     const password = prompt(\"Тут має бути ПАРОЛЬ\")\n//     console.log(password === \"Я адмін\" ? \"Доброго дня!\" : \"Невірний пароль\");\n// }else{\n//     console.log(\"Я вас не знаю\");\n// }\n// console.log(login);\n// const password = prompt()\n\n\n// function add(a, b) {\n//     const result = a + b;\n//     return result;\n// }\n\n// console.log(add(2, 4));\n\n// const str = 'М\\'який'\n// console.log(str);\n\n\n\n\n//             0    1       2      3        4\n// const array = [1, 'Hello', null, true, [1, 2, 3]];\n//             1    2       3      4        5\n// console.log(typeof array);\n// console.log(Array.isArray(array));\n// Array.isArray(array) - повертає true/false в залежності від того чи ми працюємо з масивом чи ні\n// console.log(array[3]);\n// const first = array[0];\n// console.log(first);\n// const last = array[array.length - 1];\n// console.log(array.length);\n// console.log(last);\n\n// for (let i = 0; i < array.length; i += 1) {\n//     const item = array[i];\n//     if (Array.isArray(item)) {\n//         for (let j = 0; j < item.length; j+=1){\n//             console.log(item[j]);\n//         }\n//         continue;\n//     }\n//     console.log(array[i]);\n// }\n// const array = [1, 'Hello', null, true, [1, 2, 3]];\n\n// for(let item of array){\n//     // console.log(item);\n//     if(typeof item === 'string'){\n//         item = false\n//     }\n// }\n// console.log('for of',array);\n\n// for(let i = 0; i< array.length; i+=1){\n//     if(typeof array[i] === 'string'){\n//         array[i] =false;\n//     }\n// }\n// console.log('for',array);\n\n\n\n// const array = [1, 'Hello', null, true, [1, 2, 3]];\n\n// let i = 0;\n// while (i < array.length) {\n//     if (typeof array[i] === 'string') {\n//         array[i] = false;\n//     }\n//     i += 1;\n// }\n\n// console.log(array);\n\n\n// \n\n// let value = 1;\n// let test = value;\n// value='hello';\n\n// console.log('value',value);\n// console.log('test',test);\n\n\n\n// const array = [1, 2, 3, 4, 5];\n// const copy = array;\n// array.push(6, 7);\n// copy.push(8,9)\n// console.log(array === copy);\n// console.log(array);\n// console.log(copy);\n\n\n// console.log(1 === 1);\n// console.log('hello' === 'hello');\n// console.log([1, 2, 3] === [1, 2, 3]);\n\n\n// let number = 1;\n// number +=15;\n// console.log(number);\n\n\n// let array = [1, 2, 3];\n// // array ='string';\n\n// array.push(4)\n// // array.pop();\n// // array.length = 10;\n// console.log(array);\n\n// Перерва до 21.00\n\n\n// \n// const str = 'Hello world I`m learning JS';\n// const arr = str.split('-');\n// console.log(arr);\n\n// // const result = arr.reverse().join(' ')\n\n\n// const result = str.split(' ').reverse().join(' ')\n// console.log(str);\n// // console.log(arr);\n// console.log(result);\n\n\n\n\n\n// const arr = ['hello', 'wolrd'];\n// const idx = arr.indexOf('wolrd');\n\n// if (arr.indexOf('wolrd') === -1) {\n//     console.log(\"NO\");\n// } else {\n//     console.log('yes');\n// }\n// console.log(idx);\n// console.log(arr.includes('wolrd'));\n\n// if (arr.includes('wolrd')) {\n//     console.log('YES');\n// } else {\n//     console.log('NO');\n// }\n//      3           4\n// const arr = ['hello', 'wolrd'];\n// push pop\n// arr.push(1, 'a',[1,2])\n// arr.pop()\n// arr.pop()\n// arr.pop()\n// console.log(arr);\n\n// shift unshift\n\n//      0   1      2\n// arr.unshift(1, 'a', [1, 2])\n// // arr.shift();\n// // arr.shift();\n// // arr.shift();\n// // console.log(arr);\n\n// // slice\n// const result = arr.slice(1,3);\n// console.log('result',result);\n// console.log('arr',arr);\n\n// const arr = ['hello', 'world', 'js'];\n// // splice\n\n// // arr.splice(1, 1, 'from', 'react', 'node')\n// // console.log(arr);\n// const idx = arr.indexOf('world');\n// const result = arr.splice(idx, 1, 'from')\n// console.log(arr);\n// console.log('result',result);\n\n\n// concat\n\n// const arr = [1, 2, 3];\n// const arr1 = [4, 5];\n// const arr2 = [6, 7];\n// const result = arr2.concat(arr, arr1)\n// console.log(arr);\n// console.log(result);\n\n\n// -----------------------------------//\n\n// Example 1 - Базові операції з масивом\n// Створіть масив genres з елементами «Jazz» та «Blues».\n// Додайте «Рок-н-рол» до кінця.\n// Виведіть у консоль перший елемент масиву.\n// Виведіть у консоль останній елемент масиву. Код повинен працювати для масиву довільної довжини.\n// Видаліть перший елемент та виведіть його в консоль.\n// Вставте «Country» та «Reggae» на початок масиву.\n// const genres = ['Jazz', 'Blues'];\n// genres.push('Рок-н-рол');\n// console.log(genres.shift());\n// genres.unshift('Country', 'Reggae')\n// console.log(genres);\n// console.log(genres[genres.length - 1]);\n// const genres = ['Jazz', 'Blues'];\n// genres.splice(genres.length, 0, 'Рок-н-рол');\n// console.log(genres.splice(0, 1, 'Country', 'Reggae'));\n// console.log(genres);\n\n// Example 2 - Масиви та рядки\n// Напиши скрипт для обчислення площі прямокутника зі сторонами, значення яких зберігаються у змінній values у вигляді рядка. Значення гарантовано розділені пробілом.\n\n// const values = '8 11';\n// const arr = values.split(' ');\n// const first = Number(arr[0]);\n// const last = Number(arr[arr.length - 1]);\n// const result = first * last;\n// console.log(result);\n\n\n// Example 3 - Перебір масиву\n// Напиши скрипт для перебору масиву fruits циклом for. Для кожного елемента масиву виведи в консоль рядок у форматі номер_елемента: значення_елемента. Нумерація елементів повинна починатися з 1.\n\nconst fruits = ['🍎', '🍇', '🍑', '🍌', '🍋'];\n\n// for (let i = 0; i < fruits.length; i += 1) {\n//     console.log(`${i + 1} - ${fruits[i]}`);\n// }\n\n// for (let i = 0, n = 1; i < fruits.length; i += 1, n+=1) {\n//     console.log(`${n} - ${fruits[i]}`);\n// }\n\n\n// Example 4 - Масиви та цикли\n// Напиши скрипт, який виводить у консоль ім'я та телефонний номер користувача. У змінних names та phones зберігаються рядки імен та телефонних номерів, розділені комами. Порядковий номер імен та телефонів у рядках вказують на відповідність. Кількість імен та телефонів гарантовано однакова.\n\n// let names = 'Jacob,William,Solomon,Artem';\n// let phones = '89001234567,89001112233,890055566377';\n// names = names.split(',');\n// phones = phones.split(',');\n// for (let i = 0; i < names.length, i < phones.length; i += 1){\n//     console.log(`${names[i]} - ${phones[i]}`);\n// }\n\n\n// Example 5 - Масиви та рядки\n// Напиши скрипт, який виводить у консоль усі слова рядка крім першого і останнього. Результуючий рядок не повинен починатися або закінчуватися символ пробілу. Скрипт повинен працювати для будь-якого рядка.\n\n// const string = 'Welcome to the future';\n\n// arr.pop();\n// arr.shift();\n\n// const result = arr.join(' ');\n// console.log(result);\n\n// const result = string.split(' ').slice(1, -1).join(' ');\n\n// console.log(result);\n\n// const arr = string.split(' ');\n// const test = arr.push('1234')\n// console.log(test);\n// console.log(arr);\n\n// Example 6 - Масиви та рядки\n// Напиши скрипт, який «розгортає» рядок (зворотний порядок букв) і виводить його в консоль.\n\n// const string = 'Welcome to the future';\n// const result = string.split('').reverse().join('');\n// console.log(result);\n\n\n// Example 7 - Сортування масиву із циклом\n// Напиши скрипт сортування масиву рядків в алфавітному порядку за першою літерою елемента.\n\nconst langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];\n// langs.sort((a,b) => a.localeCompare(b));\n// ['c++', 'haskel', 'javascript', 'php', 'python', 'ruby']\n// console.log(langs);\n\n// нажаль наш варіант був не вірний 😥😥😥\n\n// for (let i = 0; i < langs.length; i += 1) {\n//     if (langs[0] > langs[i]) {\n//         const result = langs.splice(i,1)[0];\n//         langs.unshift(result)\n//     }\n// }\n// console.log(langs);\n\n\n// Вірні варіанти\n// 1 метод бульбашка \n// https://www.youtube.com/watch?v=-_0dD2shabQ\n// http://xn--80adth0aefm3i.xn--j1amh/%D0%BF%D1%83%D0%B1%D0%BB%D1%96%D0%BA%D0%B0%D1%86%D1%96%D1%8F/21\n// for (let i = 0; i < langs.length; i++) {\n//     for (let j = 0; j < langs.length; j++) {\n//         if (langs[j] > langs[j + 1]) {\n//             const item = langs[j];\n//             langs[j] = langs[j + 1];\n//             langs[j + 1] = item;\n//         }\n//     }\n// }\n// console.log(langs);\n\n\n// Сучасний варіант\n// langs.sort((a,b) => a.localeCompare(b))\n// console.log(langs);\n\n\n\n\n\n\n\n// Напиши скрипт пошуку найменшого числа у масиві. Код повинен працювати для будь-якого масиву чисел. Використовуй цикл для розв'язання задачі.\n\n// const numbers = [94, 2, 17, 94, 1, 23, 37];\n// let min = numbers[0]; // undefined\n// for (const value of numbers) {\n//     if (value < min) {\n//         min = value;\n//     }\n// }\n// console.log(min); // 1\n\n// const arr = [1, 2, 3] + [4, 5];\n// console.log(arr);\n// let x = 7;\n// let y = null;\n// let a = 9;\n\n// console.log(a || x && y);\n\n\n\n\n// https://codeguida.com/post/199\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from?retiredLocale=uk\n\n\n\n\n\nconst arr = [1, 2, 3, 4];\nconst arr1 = [5, 6, 7, 8];\nconst arr2 = [8, 9, 10, 11]\n\n// sum(arr)\n// sum(arr1)\n// sum(arr2)\n\n// function sum(item){\n//     for (let i = 0; i < item.length; i += 1) {\n//         item[i] = item[i] * 2;\n//     }\n//     console.log(item);\n// }\n\n\n// declaration\n// function name(){\n\n// }\n\n// expression\n// sum(arr)\n// sum(arr1)\n// sum(arr2)\n// const sum = function (item) {\n//     for (let i = 0; i < item.length; i += 1) {\n//         item[i] = item[i] * 2;\n//     }\n//     console.log(item);\n// }\n\n\n\n// function add() {\n//     let sum = 0;\n//     // const arr = Array.from(arguments);\n//     const arr = [...arguments]\n\n//     console.log(arguments);\n//     console.log(arr);\n//     // for (let i = 0; i < arguments.length; i += 1) {\n//     //     sum += arguments[i]\n//     // }\n//     for(const value of arguments){\n//         sum +=value\n//     }\n//     console.log(sum);\n//     // console.log(val + val1 + val2 + val3 + val4 + val5);\n// }\n// add(1, 2, 3, 4, 5, 6)\n// add(1, 2, 3, 4)\n// add(1, 2, 3, 4, 5);\n\n\n\n\n\n\n\n// function add() {\n//     let sum = 0;\n//     for (const value of arguments) {\n//         sum += value;\n\n//     }\n//     return sum;\n\n// }\n// const response = add(1, 2, 3, 4, 5, 6);\n// console.log(response);\n// // add(1, 2, 3, 4)\n// // add(1, 2, 3, 4, 5);\n\n\n\n\n// function largeNumber() {\n//     let sum = 0;\n//     for (const value of arguments) {\n//         sum += value;\n//         if (sum > 10) {\n//             return true;\n//         }\n//     }\n//     return false;\n\n// }\n// const response = largeNumber(1, 2, 3);\n// console.log(response); //6 false\n// console.log(largeNumber(1, 2, 3, 4)); //10 false\n// console.log(largeNumber(1, 2, 3, 4, 5, 6)); // 15 true\n\n\n\n// function add(val, val1 = 0) {\n//     console.log(\"val\", val);\n//     console.log(\"val1\", val1);\n//     return val + val1\n\n// }\n// console.log(add(3, 4));\n// console.log(add(5, 12));\n// console.log(add(11));\n\n// let a = 10\n\n// function foo() {\n//     a = 15\n// }\n// foo()\n// console.log(a);\n\n\n\n// let a = 10\n\n// function foo() {\n//     let a = 15;\n//     a = 45;\n// }\n// foo()\n// console.log(a);\n\n\n// let a = 10\n\n// function foo() {\n//     a = 45;\n//     let a = 15;\n// }\n// foo()\n// console.log(a);\n\n\n\n// let a = 10\n\n// function foo(a) {\n//     a = 45\n// }\n// foo(a)\n// console.log(a);\n\n// const test = [1, 2, 3];\n\n// function foo(arr) {\n//     arr.splice(0, 1)\n// }\n\n// foo(test)\n// console.log(test);\n\n\n// function createString(name, year) {\n//     // const result = add(year);\n//     return `${name} years ${add(year)}`\n// }\n// console.log(createString('Mango', [1, 2, 3]));\n\n// function add(arr) {\n//     let sum = 0;\n//     for (const num of arr) {\n//         sum += num;\n//     }\n//     return sum;\n// }\n\n\n// function foo() {\n//     boo()\n// }\n// foo()\n\n// function boo() {\n//     foo()\n// }\n\n\n// Перерва до 21.05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Example 1 - Індекс маси тіла\n// Напиши функцію calcBMI(weight, height) яка розраховує та повертає індекс маси тіла людини. Для цього необхідно розділити вагу в кілограмах на квадрат висоти людини в метрах.\n\n// Вага та висота будуть спеціально передані як рядки. Не цілі числа можуть бути задані у вигляді 24.7 або 24,7, тобто як роздільник дробової частини може бути кома.\n\n// Індекс маси тіла необхідно округлити до однієї цифри після крапки;\n\n// function calcBMI(weight, height) {\n//     weight = Number(weight.replace(',', '.'));\n//     height = Number(height.replace(',', '.'));\n\n//     // return Number((weight / Math.pow(height, 2)).toFixed(1));\n//     return Number((weight / height ** 2).toFixed(1))\n// }\n\n// const bmi = calcBMI('88,3', '1.75');\n// console.log(bmi); // 28.8\n\n// const num = 2.56\n// console.log(num.toFixed(1));\n\n\n// Example 2 - Найменше з чисел\n// Напиши функцію min(a,b), яка повертає найменше з чисел a та b.\n\n// function min(a, b) {\n//     // if (a > b) {\n//     //     return b;\n//     // }\n\n//     // return a;\n\n//     return a > b ? b : a\n// }\n\n\n\n\n// console.log(min(2, 5)); // 2\n// console.log(min(3, -1)); // -1\n// console.log(min(1, 1)); // 1\n\n\n\n\n\n\n// Example 3 - Площа прямокутника\n// Напиши функцію getRectArea(dimensions) для обчислення площі прямокутника зі сторонами, значення яких будуть передані до параметра dimensions у вигляді рядка. Значення гарантовано розділені пробілом.\n\n// function getRectArea(dimensions) {\n//     dimensions = dimensions.split(' ');\n\n//     // const first = Number(dimensions[0])\n//     // const second = Number(dimensions[1])\n\n//     // return first * second;\n\n//     return Number(dimensions[0]) * Number(dimensions[1])\n//     // console.log(second);\n// }\n\n// console.log(getRectArea('8 11'));\n// console.log(getRectArea('46 11'));\n// console.log(getRectArea('8 112'));\n\n// Example 4 - Логування елементів\n// Напиши функцію logItems(items), яка отримує масив та використовує цикл for, який для кожного елемента масиву буде виводити в консоль повідомлення у форматі <номер елемента> - <значення елемента>. Нумерація елементів повинна починатися з 1.\n\n// Наприклад для першого елемента масиву ['Mango', 'Poly', 'Ajax'] з індексом 0 буде виведено 1 - Mango, а для індексу 2 - \"Poly\" виведе 3 - Ajax.\n\n// function logItems(items) {\n//     for (let i = 0, num = 1; i< items.length; i+=1, num+=1){\n//         console.log(`${num} - ${items[i]}`);\n//     }\n// }\n\n// logItems(['Mango', 'Poly', 'Ajax']);\n// logItems(['🍎', '🍇', '🍑', '🍌', '🍋']);\n\n// Example 5 - Логування контактів\n// Напиши функцію printContactsInfo(names, phones) яка виводить у консоль ім'я та телефонний номер користувача. У параметри names та phones будуть передані рядки імен та телефонних номерів, розділені комами. Порядковий номер імен та телефонів у рядках вказують на відповідність. Кількість імен та телефонів гарантовано однакова.\n\n// function printContactsInfo(names, phones) {\n//     names = names.split(',')\n//     phones = phones.split(',')\n//     console.log(phones);\n//     for (let i = 0; i < names.length, i < phones.length; i += 1) {\n//         console.log(`${names[i]} - ${phones[i]}`);\n//     }\n// }\n\n\n\nconst arr11 = ['a','b','c'];\nconst idx = arr11.indexOf('a');\nif(!!~idx){\n    console.log('YES');\n}else{\n    console.log('NO');\n}\nconsole.log(idx);\nconsole.log(!!-(idx + 1));\nconsole.log(!!~idx);\nconsole.log(Boolean(~idx));\n\n\n// printContactsInfo(\n//     'Jacob,William,Solomon,Artem',\n//     '89001234567,89001112233,890055566377,890055566300'\n// );\n\n\n// Example 6 - Пошук найбільшого елемента\n// Напиши функцію findLargestNumber(numbers)яка шукає найбільше число в масиві.\n\n// function findLargestNumber() {\n//     // const arr = Array.from(arguments)\n//     const arr = [...arguments];\n//     let max = arr[0];\n\n//     for (const num of arr) {\n//         if (num > max) {\n//             max = num\n//         }\n//     }\n\n//     return max\n// }\n\n// console.log(findLargestNumber(2, 17, 94, 1, 23, 37)); // 94\n// console.log(findLargestNumber(49, 4, 7, 83, 12)); // 83\n\n\n\n// function findLargestNumber() {\n//     let max;\n//     for (const num of arguments) {\n//         if (typeof num === 'number') {\n//             max = num;\n//             break;\n//         }\n//     }\n//     for (const num of arguments) {\n//         if (typeof num === 'number') {\n//             if (num > max) {\n//                 max = num\n//             }\n//         } else {\n//             max = findLargestNumber(...num)\n//             //[1, 143], 5, 7\n//             max = findLargestNumber(...num)// 143\n//             //[1, 143] => 1,143\n//             max = findLargestNumber(...num)\n//         }\n//     }\n//     return max\n// }\n// console.log(findLargestNumber([[1, 143], 5, 7], 6, 7, 899, 88, 123))\n\n\n\n// Example 7 - Середнє значення\n// Напишіть функцію calAverage() яка приймає довільну кількість аргументів і повертає їхнє середнє значення. Усі аргументи будуть лише числами.\n\n// function calAverage() {\n//     let total = 0;\n//     for (const num of arguments) {\n//         total += num;\n//     }\n\n//     return total / arguments.length\n// }\n\n// console.log(calAverage(1, 2, 3, 4)); // 2.5\n// console.log(calAverage(14, 8, 2)); // 8\n// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2\n\n\n// Example 8 - Форматування часу\n// Напиши функцію formatTime(minutes) яка переведе значення minutes (кількість хвилин) у рядок у форматі годин та хвилин HH:MM.\n\n\n// function formatTime(minutes) {\n//     const hours = Math.floor(minutes / 60);\n//     minutes = minutes % 60;\n//   return `${hours.toString().padStart(2,'0')} : ${minutes.toString().padStart(2,'0')}`\n// }\n\n// console.log(formatTime(70)); // \"01:10\"\n// console.log(formatTime(450)); // \"07:30\"\n// console.log(formatTime(1441)); // \"24:01\"\n\n\n\n\n// Example 9 - Колекція курсів (includes, indexOf, push і т. д.)\n// Напишіть функції для роботи з колекцією навчальних курсів courses:\n\n// addCourse(name) - додає курс до кінця колекції\n// removeCourse(name) - видаляє курс із колекції\n// updateCourse(oldName, newName) - змінює ім'я на нове\nconst courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];\n\nfunction addCourse(course) {\n    if (courses.includes(course)) {\n        return 'Ви вже маєте такий курс';\n    }\n\n    courses.push(course)\n}\n\n\n\n// addCourse('Express');\n// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']\n// console.log(addCourse('CSS')); // 'Ви вже маєте такий курс'\n\n// function removeCourse(course) {\n//     if (courses.includes(course)) {\n//         const idx = courses.indexOf(course)\n//         courses.splice(idx, 1);\n\n//         return\n//     }\n\n//     return \"Курс із таким ім'ям не знайдено\"\n// }\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT\n// !!~courses.indexOf(course); 0 => false\n//        -1 => true\n// -(0 + 1) -1 => true\n//  -(-1 + 1) -0 => false\n//    courses.includes(course)\n// !!  === Boolean()\n// console.log(!!~1);\n\n// function removeCourse(course) {\n//     const idx = courses.indexOf(course);\n//     if (!!~idx) {\n//         courses.splice(idx, 1);\n//         return;\n//     }\n//     return \"Курс із таким ім'ям не знайдено\"\n// }\n\n\n// removeCourse('React');\n// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']\n// console.log(removeCourse('Vue'));; // 'Курс із таким ім'ям не знайдено'\n\n\n\n\n// function updateCourse(oldCourse, newCourse) {\n//     const idx = courses.indexOf(oldCourse);\n//     if (!!~idx) {\n//         courses.splice(idx, 1, newCourse);\n//         return;\n//     }\n\n//     return \"Курс із таким ім'ям не знайдено\";\n\n// }\n\n\n\n\n// updateCourse('Express', 'NestJS');\n// console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']\n// console.log(updateCourse('Express', 'NestJS'));\n\n\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n\n// const user = {\n//     name: 'Artem',\n//     age: 28,\n//     languages: {\n//         html: false,\n//         css: false,\n//         js: true,\n//         \"React Native\": false\n//     }\n// }\n\n// console.log(user.languages.React_Native);\n// console.log(user['languages'][\"React Native\"]);\n\n// for (const key in user){\n// console.log(user.key);\n//     console.log(key);\n//     console.log(user[key]);\n//     // console.log(user[key]);\n// }\n// const test = 3;\n// const test2 = 45;\n// const value = 'start'\n// const value2 = 'End'\n// const user = {\n//     name: 'Artem',\n//     age: 28,\n//     languages: {\n//         html: false,\n//         css: false,\n//         js: true,\n//         \"React Native\": false\n//     },\n//     // [value + value2] : 'some value',\n//     result : test + test2,\n\n// };\n// console.log(user.result);\n\n// user.age = 29;\n// user.age += 1\n\n// user.city = 'VN';\n// console.log(user);\n// // console.log(user.age);\n\n\n// delete user.city\n// console.log(user);\n\n\n\n\n// const user = {\n//     name: 'Artem',\n//     age: 28,\n//     languages: {\n//         html: false,\n//         css: false,\n//         js: true,\n//         \"React Native\": false\n//     }\n// };\n\n\n// Object.freeze(user);\n// user.asdfwesgfasdfasz = 'dasdgvsdfdafsed';\n// user.age = 100;\n// console.log(user);\n\n\n\n\n\n// const user = {\n//     name: 'Artem',\n//     age: 28,\n//     languages: {\n//         html: false,\n//         css: false,\n//         js: true,\n//         \"React Native\": false\n//     }\n// };\n// // Object.freeze(user);\n\n// const user2 = Object.create(user);\n// user2.age = 33\n// console.log(user2);\n// console.log(user);\n\n\n\n\n// for (const key in user2) {\n//     if (user2.hasOwnProperty(key)) {\n//         console.log('Own', user2[key]);\n//     } else {\n//         console.log('All', user2[key]);\n//     }\n// }\n\n// console.log('All', user2[key]);\n// const user = {\n//     score: false\n// }\n\n// if (user.hasOwnProperty('score')) {\n//     console.log('yes');\n// } else {\n//     console.log('no');\n// }\n\n// if ('score' in user) {\n//     console.log('yes');\n// } else {\n//     console.log('no');\n// }\n\n\n// if (user.score) {\n//     console.log('yes');\n// } else {\n//     console.log('no');\n// }\n\n\nconst user = {\n    name: 'Artem',\n    age: 28,\n    languages: {\n        html: false,\n        css: false,\n        js: true,\n        ReactNative: false,\n    },\n    sayHello() {\n        console.log(`My name ${this.name}`);\n    },\n    iKnow() {\n        // const keys = Object.keys(this.languages);\n        // const values = Object.values(this.languages);\n        // const entries = Object.entries(this.languages);\n        const keys = Object.keys(this);\n        for(const key of keys){\n            if(typeof this[key] === 'function'){\n                continue;\n            }else{\n                console.log(key);\n            }\n        }\n        console.log(keys);\n        // console.log(values);\n        // console.log(entries);\n        // for (const key of keys) {\n        //     console.log(key);\n        //     if (this.languages[key]) {\n        //         // console.log(key);\n        //     }\n        // }\n        // console.log(keys);\n        // for(const key in this.languages){\n        //     if(this.languages[key])\n        //     console.log(key);\n        // }\n    }\n}\nuser.iKnow()\n// const user2 = Object.create(user);\n// user2.name = 'Den';\n// console.log(user2);\n// user2.sayHello()\n// user.sayHello()\n\n\n\n\n\n\n\n// Example 1 - Основи об 'єктів\n// Напиши скрипт, який для об'єкта user, послідовно:\n\n// додає поле mood зі значенням 'happy'\n// замінює значення hobby на 'skydiving'\n// замінює значення premium на false\n// виводить вміст об 'єкта user у форматі ключ:значення використовуючи Object.keys() та for...of\n\n// const user = {\n//     name: 'Mango',\n//     age: 20,\n//     hobby: 'html',\n//     premium: true,\n// };\n\n// user.skills = {\n//     run: true\n// }\n\n// user.mood = 'happy';\n// user.hobby = 'skydiving';\n// // user['premium'] = false;\n// const key = 'premium';\n// user[key] = false;\n// console.log(user);\n// for (const key in user) {\n//     console.log(user[key]);\n// }\n// const keys = Object.keys(user);\n// for(const key of keys){\n//     console.log(user[key]);\n// }\n// console.log(keys);\n\n\n// Example 2 - метод Object.values()\n// У нас є об'єкт, де зберігаються зарплати нашої команди. Напишіть код для підсумовування всіх зарплат і збережіть результат у змінній sum. Повинно вийти 390. Якщо об'єкт salaries порожній, то результат має бути 0.\n\n// const salaries = {\n//     John: 100,\n//     Ann: 160,\n//     Pete: 130,\n// };\n\n// let sum = 0;\n// const values = Object.values(salaries);\n// console.log(values);\n// for(const value of values){\n//     sum += value\n//     // console.log(value);\n// }\n// console.log(sum);\n// for (const key in salaries) {\n//     console.log(key);\n//     sum += salaries[key]\n//     console.log(salaries[key]);\n// }\n// console.log(sum);\n\n\n\n\n\n// Example 3 - Масив об 'єктів\n// Напишіть функцію calcTotalPrice(stones, stoneName), яка приймає масив об 'єктів та рядок з назвою каменю. Функція рахує і повертає загальну вартість каміння з таким ім'ям, ціною та кількістю з об'єкта\n\n\n// const stones = [{\n//         name: 'Смарагд',\n//         price: 1300,\n//         quantity: 4\n//     },\n//     {\n//         name: 'Діамант',\n//         price: 2700,\n//         quantity: 3\n//     },\n//     {\n//         name: 'Сапфір',\n//         price: 400,\n//         quantity: 7\n//     },\n//     {\n//         name: 'Щебінь',\n//         price: 200,\n//         quantity: 2\n//     },\n// ];\n\n// function calcTotalPrice(stones, stoneName) {\n\n//     for (const stone of stones) {\n//         // if (stone.name === stoneName) {\n//         //     result = stone.price * stone.quantity;\n//         //     break;\n//         // }\n//         if (stone.name === stoneName) {\n//             return stone.price * stone.quantity;\n//         }\n//         console.log(stone.name);\n//     }\n//     return 'Empty';\n//     // return result;\n// }\n// console.log(calcTotalPrice(stones, 'asdas'));\n\n// Example 4 - Комплексні завдання\n// Напиши скрипт управління особистим кабінетом інтернет банку. Є об'єкт account в якому необхідно реалізувати методи для роботи з балансом та історією транзакцій.\n\n// /*\n//  * Типів транзакцій всього два.\n//  * Можна покласти чи зняти гроші з рахунку.\n//  */\n// const Transaction = {\n//     DEPOSIT: 'deposit',\n//     WITHDRAW: 'withdraw',\n// };\n// Object.freeze(Transaction)\n// // Transaction.DEPOSIT = 'asdnasjkdnjasdjn'\n// // console.log(Transaction);\n// // /*\n// //  * Кожна транзакція це об'єкт із властивостями: id, type та amount\n// //  */\n\n// const account = {\n//     // Поточний баланс рахунку\n//     balance: 0,\n\n//     // Історія транзакцій\n//     transactions: [{\n//         id: 16,\n//         amount: 145,\n//         type: 'deposit'\n//     }, ],\n\n//     /*\n//      * Метод створює та повертає об'єкт транзакції.\n//      * Приймає суму та тип транзакції.\n//      */\n//     createTransaction(amount, type) {\n//         return {\n//             id: Date.now(),\n//             amount,\n//             type\n//         }\n//     },\n\n//     /*\n//      * Метод, що відповідає за додавання суми до балансу.\n//      * Приймає суму транзакції.\n//      * Викликає createTransaction для створення об'єкта транзакції\n//      * після чого додає його до історії транзакцій\n//      */\n//     deposit(amount) {\n//         if (amount <= 0) {\n//             return 'Error'\n//         }\n//         const item = this.createTransaction(amount, Transaction.DEPOSIT)\n//         this.balance += amount\n//         this.transactions.push(item)\n//     },\n\n//     /*\n//      * Метод, що відповідає за зняття суми з балансу.\n//      * Приймає суму транзакції.\n//      * Викликає createTransaction для створення об'єкта транзакції\n//      * після чого додає його до історії транзакцій.\n//      *\n//      * Якщо amount більше ніж поточний баланс, виводь повідомлення\n//      * про те, що зняття такої суми не можливе, недостатньо коштів.\n//      */\n//     withdraw(amount) {\n//         if (amount > this.balance || amount <= 0) {\n//             return 'недостатньо коштів';\n//         }\n//         const item = this.createTransaction(amount, Transaction.WITHDRAW)\n//         this.transactions.push(item);\n//         this.balance -= amount;\n\n//     },\n\n//     /*\n//      * Метод повертає поточний баланс\n//      */\n//     getBalance() {\n//         return this.balance\n//     },\n\n//     /*\n//      * Метод шукає та повертає об'єкт транзакції по id\n//      */\n//     getTransactionDetails(id) {\n//         for (const transaction of this.transactions) {\n//             if (transaction.id === id) {\n//                 return transaction\n//             }\n//         }\n//         return 'Empty';\n//     },\n\n//     /*\n//      * Метод повертає кількість коштів\n//      * певного типу транзакції з усієї історії транзакцій\n//      */\n//     getTransactionTotal(type) {\n//         let sum = 0;\n//         for (const transaction of this.transactions) {\n//             if (transaction.type === type) {\n//                 sum += transaction.amount\n//             }\n//         }\n\n//         return sum;\n//     },\n// };\n// account.deposit(1);\n// account.deposit(1231);\n// account.deposit(1431);\n// account.withdraw(123);\n// console.log(account.getTransactionTotal(Transaction.WITHDRAW));\n// console.log(account);\n// // Перерва до 21:15\n\n\n// const arr = ['a', 'b', 'c']\n// const idx = arr.indexOf('asdas');\n\n// function foo() {\n//     if (idx === -1) {\n//         console.log(\"немає\");\n//         return;\n//     }\n//     arr.splice(idx, 1)\n// }\n// foo()\n\n// console.log(idx);\n// console.log(arr);\n\n\n// function countup(n) {\n//     if (n < 1) {\n//       return [];\n//     } else {\n//   const countArray = countup(n - 1);\n//       countArray.push(n);\n//       return countArray;\n//     }\n//   }\n//   console.log(countup(5));\n\n// const arr = [1, 2, 3];\n// const [, _, third] = arr;\n\n// console.log(_);\n// console.log(third);\n\n\n// const user = {\n//     name: 'Test',\n//     age: 11,\n//     skills: {\n//         html: true,\n//         css: true,\n//         js: false\n//     }\n// };\n// const name = 'value';\n// const userName = 'Some name'\n// const {age: userAge , name : nameUser} = user;\n\n// console.log('age',userAge);\n// console.log(name);\n// console.log(userName);\n// console.log(nameUser);\n// const age = user.age;\n// const html = user.skills.html;\n\n\n// const user = {\n//     name: 'Test',\n//     age: 11,\n//     skills: {\n//         html: true,\n//         css: true,\n//         js: false,\n//         cars: {\n//             audi: 'A6',\n//             bmw: 'x5'\n//         }\n//     },\n//     languages : [{html : true}, {css: false}]\n// };\n\n// const {languages : [skillHtml, css]} = user\n// const {html} = skillHtml\n// console.log(html);\n// console.log(css);\n\n\n\n// const skills = 123\n// const {\n//     name,\n//     skills: {\n//         js,\n//         css : sass,\n//         cars: {\n//             audi\n//         }\n//     }\n// } = user;\n\n// console.log(sass);\n\n\n// const user = {\n//     name: 'Test',\n//     age: 11,\n//     skills: {\n//         html: true,\n//         css: true,\n//         js: false,\n//         cars: {\n//             audi: 'A6',\n//             bmw: 'x5'\n//         }\n//     },\n//     languages: [{\n//         html: true\n//     }, {\n//         css: false\n//     }]\n// };\n// for(const {html} of user.languages){\n//     console.log(html);\n// }\n\n\n\n// const users = [{\n//     name: 'User1',\n//     language: 'html',\n//     car: {\n//         audi: 'A6',\n//         bmw: 'X5'\n//     }\n// }, {\n//     name: 'User2',\n//     language: 'css',\n//     car: {\n//         audi: 'A8',\n//         bmw: 'X6'\n//     }\n// }, {\n//     name: 'User3',\n//     language: 'js',\n//     car: {\n//         audi: 'A7'\n//     }\n// }]\n// а чому на кар нема конфлікту?\n\n\n\n// for(const {name, car : {audi : car}} of users){\n//     console.log(car);\n// }\n// for (const {\n//         name,\n//         cars: {\n//             audi = \"None\",\n//             bmw = 'None'\n//         }\n//     } of users) {\n//     console.log(audi, bmw);\n// }\n\n\n\n// function foo({name = \"No name\", car: {bmw = 'None'} = {}} = {}) {\n//     console.log(name,bmw);\n//     ///\n// }\n// foo({\n//     name: 'User1',\n//     language: 'html',\n//     car: {\n//         audi: 'A6',\n//         bmw: 'X5'\n//     }\n\n// })\n// foo({\n//     name: 'User2',\n//     language: 'html',\n// })\n// foo()\n\n\n// const arr1 = [12, 22, 3, 14, 45, 16, 57];\n// // // spread\n// // const min = Math.min(...arr1)\n// // console.log(min);\n// //    12, 22, 3, 14, 45, 16, 57\n// const arr2 = [...arr1];\n// // arr2.splice(0, 1)\n// console.log(arr1 === arr2);\n\n// // // rest\n// const [first, second, ...props] = arr1;\n// console.log('props', props);\n// console.log(first);\n// // for(let prop of props){\n// //     prop *= first\n// // }\n// for (let i = 0; i < props.length; i += 1) {\n//     props[i] *= first\n// }\n// console.log(props);\n\n\n\n// function foo(first, second, ...args) {\n//     console.log(args);\n// }\n\n// foo(1, 2, 3, 4, 5, 6)\n// const arr1 = [12, 22, 3, 14, 45, 16, 57];\n\n// function foo(first, second, ...rest) {\n//     console.log(arguments);\n//     console.log(first, second,rest);\n// }\n// foo(...arr1)\n\n\n\n\n\n\n// Example 1 - Деструктуризація\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору незалежних аргументів.\n\n\n// JS Doc /** */\n/**\n * Розраховуємо індекс маси тіла людини\n * @param {Object} obj\n * @returns {Number} BMI\n */\n// function calcBMI({\n//     weight,\n//     height\n// }) {\n//     const numericWeight = Number(weight.replace(',', '.'));\n//     const numericHeight = Number(height.replace(',', '.'));\n//     return Number((numericWeight / numericHeight ** 2).toFixed(1));\n// }\n\n// // // Було\n// // console.log(calcBMI('88,3', '1.75'));\n// console.log(calcBMI({\n//     weight: '88,3',\n//     height: '1.75'\n// }));\n// console.log(calcBMI({\n//     weight: '68,3',\n//     height: '1.65'\n// }));\n// console.log(calcBMI({\n//     weight: '118,3',\n//     height: '1.95'\n// }));\n\n\n// Example 2 - Деструктуризація\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору незалежних аргументів.\n\n\n// /**\n//  * \n//  * @param {Object} obj \n//  */\n// function printContactsInfo({names, phones}) {\n//     const nameList = names.split(',');\n//     const phoneList = phones.split(',');\n//     for (let i = 0; i < nameList.length; i += 1) {\n//         console.log(`${nameList[i]}: ${phoneList[i]}`);\n//     }\n// }\n\n\n// printContactsInfo({\n//     names: 'Jacob,William,Solomon,Artemis',\n//     phones: '89001234567,89001112233,890055566377,890055566300'\n// }, );\n\n\n// Example 3 - Глибока деструктуризація\n// Перепиши функцію так, щоб вона приймала один об'єкт параметрів замість набору незалежних аргументів.\n\n// function getBotReport({\n//     companyName,\n//     repairBots,\n//     defenceBots\n// }) {\n//     return `${companyName} has ${repairBots + defenceBots} bots in stock`;\n// }\n\n// // Було\n// console.log(getBotReport({\n//     companyName: 'Cyberdyne Systems',\n//     repairBots: 150,\n//     defenceBots: 50\n// }));\n\n\n// Example 4 - Деструктуризація\n// Перепиши функцію так, щоб вона приймала об'єкт параметрів із властивостями companyName та stock та виводила репорт про кількість товарів на складі будь-якої компанії.\n\n\n// function getStockReport({companyName, stock}) {\n//     // let total = repairBots + defenceBots;\n//     let total = 0\n//     for (const value of Object.values(stock)) {\n//         total += value;\n//     }\n//     return `${companyName} has ${total} items in stock`;\n// }\n\n// console.log(\n//     getStockReport({\n//         companyName: 'Cyberdyne Systems',\n//         stock: {\n//             repairBots: 150,\n//             defenceBots: 50,\n//         }\n//     }),\n// ); // \"Cyberdyne Systems has 200 items in stock\"\n\n// console.log(\n//     getStockReport({\n//         companyName: 'Belacci',\n//         stock: {\n//             shoes: 20,\n//             skirts: 10,\n//             hats: 5,\n//         }\n//     })); // \"Belacci has 35 item in stock\"\n// Example 5 - Операція spread\n// Доповни функцію createContact(partialContact) так, щоб вона повертала новий об'єкт контакту з доданими властивостями id та createdAt, а також list зі значенням \"default\" якщо в partialContact немає такої властивості.\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n// function createContact(partialContact) {\n//     return {\n//         id: generateId(),\n//         createdAt: new Date(),\n//         list :\"default\",\n//         ...partialContact,\n//     }\n// }\n\n// console.log(\n//     createContact({\n//         name: 'Mango',\n//         email: 'mango@mail.com',\n//         list: 'friends',\n//     }),\n// );\n// console.log(\n//     createContact({\n//         name: 'Poly',\n//         email: 'poly@hotmail.com',\n//     }),\n// );\n\n// function generateId() {\n//   return '_' + Math.random().toString(36).substr(2, 9);\n// }\n\n// Example 6 - Операція rest\n// Напиши функцію transformUsername(user) так, щоб вона повертала новий об'єкт із властивістю De, замість firstName та lastName.\n\n// function transformUsername({firstName, lastName, ...props}) {\n// return {\n//     fullName: `${firstName} ${lastName}`,\n//     ...props\n// }\n// }\n\n// console.log(\n//     transformUsername({\n//         id: 1,\n//         firstName: 'Jacob',\n//         lastName: 'Mercer',\n//         email: 'j.mercer@mail.com',\n//         friendCount: 40,\n//     }),\n// );\n// // {\n// //     id: 1,\n// //     fullName: 'Jacob Mercer',\n// //     email: 'j.mercer@mail.com',\n// //     friendCount: 40,\n// // }\n// console.log(\n//     transformUsername({\n//         id: 2,\n//         firstName: 'Adrian',\n//         lastName: 'Cross',\n//         email: 'a.cross@hotmail.com',\n//         friendCount: 20,\n//     }),\n// );\n\n// const products = [{\n//     name: 'apple',\n//     qty: 4,\n//     key : \"Test\"\n// }]\n\n// function getAllPropValues(propName) {\n//     // Change code below this line\n//     let valuesPropName = [];\n\n//     for (const product of products) {\n//         for (const key in product) {\n//             // console.log(key);\n//             if (key === propName) {      //name\n//                 console.log(product[key]);\n//                 console.log(product.key);\n//                 valuesPropName.push();\n//                 valuesPropName.push();\n//             }\n//         }\n//     }\n//     return valuesPropName;\n// }\n// getAllPropValues('name')\n\n\n\n// const firstBook = {\n//     title: \"The Last Kingdom\",\n//     coverImage: \"https://images-na.ssl-images-amazon.com/images/I/51b5YG6Y1rL.jpg\",\n// };\n\n// const {\n//     title: firstTitle,\n//     coverImage: firstCoverImage = \"https://via.placeholder.com/640/480\",\n// } = firstBook;\n\n// const secondBook = {\n//     title: \"Сон смішної людини\",\n//     coverImage: \"https://via.placeholder.com/640/480\",\n// };\n\n// const {\n//     title: secondTitle,\n//     coverImage: secondCoverImage = \"https://via.placeholder.com/640/480\",\n// } = secondBook;\n\n// console.log(secondTitle); // Сон смішної людини\n// console.log(secondCoverImage); // https://via.placeholder.com/640/480\n\n\n// const products = [{\n//         name: 'Radar',\n//         price: 1300,\n//         quantity: 4\n//     },\n//     {\n//         name: 'Scanner',\n//         price: 2700,\n//         quantity: 3\n//     },\n//     {\n//         name: 'Droid',\n//         price: 400,\n//         quantity: 7\n//     },\n//     {\n//         name: 'Grip',\n//         price: 1200,\n//         quantity: 9\n//     },\n// ];\n\n\n// function getAllPropValues(propName) {\n//     const newArr = [];\n\n//     for (const product of products) {\n//         propName in product ? newArr.push(product[propName]) : null;\n\n//     }\n//     return newArr;\n// }\n// console.log(getAllPropValues('price'));\n\n\n// console.log(typeof name);\n// const subStr = 1234;\n// console.log(subStr);\n// console.log(subStr);\n// let test;\n// console.log(test);\n\n\n// http://xn--80adth0aefm3i.xn--j1amh/%D0%BF%D1%83%D0%B1%D0%BB%D1%96%D0%BA%D0%B0%D1%86%D1%96%D1%8F/21\n\n\n// function foo(a, b) {\n//     console.log(a, b);\n// }\n\n// console.log(foo);\n\n// foo(5, 10)\n\n\n// function foo(callback){\n//     console.log(\"callback\",callback);\n//     callback(10)\n// }\n\n// function logger(value){\n//     console.log(value);\n// }\n\n// // const numb = 10;\n// // console.log(numb);\n// console.log('logger',logger);\n// foo(logger)\n\n// const arr = [2, 6, 1, 7, 3]\n\nfunction add(arr) {\n    let total = arr[0];\n\n    for (let i = 1; i < arr.length; i += 1) {\n        total += arr[i]\n    }\n\n    return total\n}\n\n// console.log(add(arr));\n\n\n// function sum(arr) {\n//     let total = arr[0];\n\n//     for (let i = 1; i < arr.length; i += 1) {\n//         total *= arr[i]\n//     }\n\n//     return total\n// }\n\n// console.log(sum(arr));\n\n// function division(arr) {\n//     let total = arr[0];\n\n//     for (let i = 1; i < arr.length; i += 1) {\n//         total /= arr[i]\n//     }\n\n//     return total\n// }\n\n\n// function each(arr, callback) {\n//     let total = arr[0]\n//     for (let i = 1; i < arr.length; i += 1) {\n//         total = callback(total, arr[i])\n//     }\n\n//     return total\n// }\n// console.log(each(arr, add));\n// console.log(each(arr, sum));\n// console.log(each(arr, division));\n\n// function add(first, second) {\n//     return first + second\n// }\n\n// function sum(first, second) {\n//     return first * second\n// }\n\n// function division(first, second) {\n//     return first / second\n// }\n\n\n\n// const arr = [2, 6, 1, 7, 3];\n\n\n// arr.forEach(function (_, idx) {\n//     console.log(idx);\n// })\n\n\n\n// console.log(arr);\n//item -ітеруємий елемент\n//idx -індекс поточного елемента\n//arr - масив який ітеруємо\n\n// arr.forEach(function (item) {\n//     // console.log(`work witn number ${item}`);\n//     // arr[i] = item * 2\n//     // item *= 2\n//     // console.log(item);\n// })\n\n// console.log(arr);\n\n\n// const Array = {\n//     forEach(){\n\n//     }\n\n// }\n// console.log(arr);\n\n\n// function each(arr, callback) {\n//     let total = arr[0];\n//     for (let i = 1; i < arr.length; i += 1) {\n//         total = callback(total, arr[i])\n//     }\n//     return total\n// }\n\n// console.log(each(arr, add));\n\n// console.log(each(arr, sum));\n\n// console.log(each(arr, division));\n\n\n// function add(first, second) {\n//     return first + second\n// }\n\n// function sum(first, second) {\n//     return first * second\n// }\n\n// function division(first, second) {\n//     return first / second\n// }\n\n// declaration\n// foo()\n// function foo(){\n\n// }\n\n\n// expression\n// const boo = function(){\n\n// }\n// boo()\n\n// arrow\n// arguments - відсутній\n// const foo = (...rest) => {\n// console.log(rest);\n\n// };\n// foo(1, 2, 3, 4, 5)\n// foo(1, 2, 3, 4, 21, 532, 5324, 5)\n\n\n\n\n\n// const arr = [2, 6, 1, 7, 3]\n// const add = (first, second) => first + second;\n// const multiply = (first, second) => first * second;\n// const multiply = (first, second) => {\n//     return first * second\n// };\n// const division = (first, second) => first / second;\n\n// function each(arr, callback) {\n//     let total = arr[0];\n//     for (let i = 1; i < arr.length; i += 1) {\n//         total = callback(total, arr[i])\n//     }\n//     return total\n// }\n\n// console.log(each(arr, add));\n// console.log(each(arr, multiply));\n// console.log(each(arr, division));\n\n// function foo() {\n\n// }\n// const boo = () => {}\n// const user = {\n//     userName: 'Test user',\n//     say() {\n//         console.log(`Hello ${this.userName}`);\n//     },\n//     sayHello: () => {\n//         console.log(`Hello ${this.userName}`);\n//     }\n// }\n// user.say();\n// user.sayHello()\n\n// Перерва до 21.20\n\n\n\n// Example 1 - Коллбек функції\n// Напишіть наступні функції:\n\n// createProduct(obj, callback) - приймає об'єкт товару без id, а також коллбек. Функція створює об'єкт товару, додаючи йому унікальний ідентифікатор у властивість id та викликає коллбек передаючи йому створений об'єкт.\n// logProduct(product) - колббек приймаючий об'єкт продукту і логуючий його в консоль\n// logTotalPrice(product) - колббек, що приймає об'єкт продукту і логіює загальну вартість товару в консоль\n// // Рішення\n\n// function createProduct(obj, callback){\n//     const product = {\n//         id: Date.now(),\n//         ...obj\n//     }\n//     callback(product)\n//     console.log(product);\n// }\n\n// function logProduct(obj){\n// console.log(`Product ${obj.name}`);\n// }\n\n// function logTotalPrice({price, quantity}){\n// console.log(`Total price ${price * quantity}`);\n// }\n// createProduct({\n//     name: '🍎',\n//     price: 30,\n//     quantity: 3\n// }, logProduct);\n// createProduct({\n//     name: '🍋',\n//     price: 20,\n//     quantity: 5\n// }, logTotalPrice);\n\n\n\n// Example 2 - Коллбек функції\n// Додайте в об'єкт account методи withdraw(amount, onSuccess, onError) та deposit(amount, onSuccess, onError), де перший параметр це сума операції, а другий та третій - коллбеки.\n\n// Метод withdraw викликає onError якщо amount більше TRANSACTION_LIMIT або this.balance, і onSuccess в іншому випадку.\n\n// Метод deposit викликає onError якщо amount більше TRANSACTION_LIMIT або менше або дорівнює нулю, і onSuccess в іншому випадку.\n\n// // Рішення\n// const TRANSACTION_LIMIT = 1000;\n\n// const account = {\n//     username: 'Jacob',\n//     balance: 400,\n\n//     withdraw(amount, onSuccess, onError) {\n//         if (amount > TRANSACTION_LIMIT) {\n//             onError(`TRANSACTION LIMIT ${TRANSACTION_LIMIT}`)\n//             return\n      \n//         } else if (this.balance < amount) {\n//             onError('Not enough in the account');\n//             return\n//       }\n\n//         this.balance -= amount;\n//         onSuccess(`Transaction complete ${amount}, balance ${this.balance}.`)\n//     },\n//     deposit(amount, onSuccess, onError) {\n//         if (amount > TRANSACTION_LIMIT) {\n//             onError(`TRANSACTION LIMIT ${TRANSACTION_LIMIT}`);\n//             return;\n//         } else if (amount <= 0) {\n//             onError(`Nice try Bro 😂`);\n//             return;\n//         }\n\n//         this.balance += amount;\n//         onSuccess(`Added ${amount}, balance ${this.balance}`)\n\n//     }\n// };\n\n// function handleSuccess(message) {\n//     console.log(`✅ Success! ${message}`);\n// }\n\n// function handleError(message) {\n//     console.log(`❌ Error! ${message}`);\n// }\n\n// account.withdraw(2000, handleSuccess, handleError);\n// account.withdraw(600, handleSuccess, handleError);\n// account.withdraw(300, handleSuccess, handleError);\n// account.deposit(1700, handleSuccess, handleError);\n// account.deposit(0, handleSuccess, handleError);\n// account.deposit(-600, handleSuccess, handleError);\n// account.deposit(600, handleSuccess, handleError);\n\n\n\n// Example 3 - Коллбек функції\n// Напишіть функцію each(array, callback), яка першим параметром очікує масив, а другим - функцію, яка застосовується до кожного елемента масиву. Функція each повинна повернути новий масив, елементами якого будуть результати виклику коллбека.\n\n// // Рішення\n// function each(array, callback) {\n// }\n\n// console.log(\n//   each([64, 49, 36, 25, 16], function (value) {\n//     return value * 2;\n//   }),\n// );\n// console.log(\n//   each([64, 49, 36, 25, 16], function (value) {\n//     return value - 10;\n//   }),\n// );\n// console.log(\n//   each([64, 49, 36, 25, 16], function (value) {\n//     return Math.sqrt(value);\n//   }),\n// );\n// console.log(\n//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {\n//     return Math.ceil(value);\n//   }),\n// );\n// console.log(\n//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {\n//     return Math.floor(value);\n//   }),\n// );\n\n\n// Example 4 - Стрілочні функції\n// Виконайте рефакторинг коду за допомогою стрілочних функцій.\n\n// const createProduct = (partialProduct, callback) => {\n//     const product = {\n//         id: Date.now(),\n//         ...partialProduct\n//     };\n//     callback(product);\n// }\n\n// const createProduct = (partialProduct, callback) => callback({\n//     id: Date.now(),\n//     ...partialProduct\n// });\n\n\n// const logProduct = product => console.log(product.name);\n// const logTotalPrice = ({\n//     price,\n//     quantity\n// }) => console.log(price * quantity);\n\n// createProduct({\n//     name: '🍎',\n//     price: 30,\n//     quantity: 3\n// }, logProduct);\n// createProduct({\n//     name: '🍋',\n//     price: 20,\n//     quantity: 5\n// }, logTotalPrice);\n\n\n// Example 5 - Стрілочні функції\n// Виконайте рефакторинг колбеків за допомогою стрілочних функцій.\n\n// const TRANSACTION_LIMIT = 1000;\n\n// const account = {\n//     username: 'Jacob',\n//     balance: 400,\n//     withdraw(amount, onSuccess, onError) {\n//         if (amount > TRANSACTION_LIMIT) {\n//             onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);\n//         } else if (amount > this.balance) {\n//             onError(`Amount can't exceed account balance of ${this.balance} credits`);\n//         } else {\n//             this.balance -= amount;\n//             onSuccess(`Account balance: ${this.balance}`);\n//         }\n//     },\n//     deposit(amount, onSuccess, onError) {\n//         if (amount > TRANSACTION_LIMIT) {\n//             onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);\n//         } else if (amount <= 0) {\n//             onError(`Amount must be more than 0 credits`);\n//         } else {\n//             this.balance += amount;\n//             onSuccess(`Account balance: ${this.balance}`);\n//         }\n//     },\n// };\n\n// const handleSuccess = message => console.log(`✅ Success! ${message}`);\n\n\n// const handleError = message => console.log(`❌ Error! ${message}`);\n\n\n// account.withdraw(2000, handleSuccess, handleError);\n// account.withdraw(600, handleSuccess, handleError);\n// account.withdraw(300, handleSuccess, handleError);\n// account.deposit(1700, handleSuccess, handleError);\n// account.deposit(0, handleSuccess, handleError);\n// account.deposit(-600, handleSuccess, handleError);\n// account.deposit(600, handleSuccess, handleError);\n\n\n\n// Example 6 - Інлайн стрілочні функції\n// Виконайте рефакторинг коду за допомогою стрілочних функцій.\n\n// function each(array, callback) {\n//     const newArr = [];\n//     for (const el of array) {\n//         newArr.push(callback(el));\n//     }\n//     return newArr;\n// }\n\n// console.log(each([64, 49, 36, 25, 16], value => value * 2));\n// console.log(each([64, 49, 36, 25, 16], value => value - 10));\n// console.log(each([64, 49, 36, 25, 16], value =>Math.sqr(value)));\n// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));\n// console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));\n\n\n\n// Example 7 - Метод forEach\n// Виконайте рефакторинг коду за допомогою методу forEach та стрілочні функції.\n\n// function logItems(items) {\n//   console.log(items);\n//   for (let i = 0; i < items.length; i += 1) {\n//     console.log(`${i + 1} - ${items[i]}`);\n//   }\n// }\n\n// const logItems = arr => arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`))\n// logItems(['Mango', 'Poly', 'Ajax']);\n// logItems(['🍎', '🍇', '🍑', '🍌', '🍋']);\n\n\n// Example 8 - Метод forEach\n// Виконайте рефакторинг коду за допомогою методу forEach та стрілочні функції.\n\n// function calсulateAverage(...args) {\n//   let total = 0;\n//   for (let i = 0; i < args.length; i++) {\n//     total += args[i];\n//   }\n//   return total / args.length;\n// }\n\n// const calсulateAverage = (...arr) => {\n//     let total = 0;\n//     arr.forEach(value => total += value)\n\n//     return total / arr.length\n// }\n\n// console.log(calсulateAverage(1, 2, 3, 4)); // 2.5\n// console.log(calсulateAverage(14, 8, 2)); // 8\n// console.log(calсulateAverage(27, 43, 2, 8, 36)); // 23.2\n\n\n// map\n// const arr = [1, 2, 3, 4, 5, 6, 7];\n\n// const result = arr.map((item, idx, arr) => item * 2);\n\n// const result = arr.map((item, idx, arr) => {\n//     item * 2\n// });\n// console.log(result);\n// console.log(arr);\n// const arr = [1, 2, 3, 4, 5, 6, 7]\n// const result = arr.map(item => {\n//     if (!(item % 2)) {\n//         return item * 2\n//     }\n//     return item\n// })\n\n// const result = arr.map(item => !(item % 2) ? item * 2 : item)\n\n// console.log(result);\n\n\n\n\n// function customMap(arr, callback) {\n//     const result = []\n//     for (let i = 0; i < arr.length; i += 1) {\n//         const item = arr[i];\n//         result.push(callback(item, i, arr));\n//     }\n//     return result;\n// }\n// console.log(customMap(arr, foo));\n\n// function foo(item, idx, arr) {\n//     if (!(item % 2)) {\n//         return item * 2\n//     }\n//     return item\n\n// }\n\n// const arr = [{\n//     name: 'User1',\n//     skills: ['html', 'css']\n// }, {\n//     name: 'User2',\n//     skills: ['js', 'react']\n// }, {\n//     name: 'User3',\n//     skills: ['node.js', 'express']\n// }]\n\n// const result = arr.map(item => item.skills.map(skill => skill))\n// console.log(result);\n\n\n\n// flatMap\n// const result = arr.flatMap(item => item.skills)\n// console.log(result);\n\n\n\n// find\n// const arr = [1, 2, 3, 4, 5, 6, 7];\n// const arr = [{\n//     name: 'User1',\n//     skills: ['html', 'css']\n// }, {\n//     name: 'User2',\n//     skills: ['js', 'react']\n// }, {\n//     name: 'User3',\n//     skills: ['node.js', 'express']\n// }]\n// const result = arr.find(item => item > 100)\n// const result = arr.find(item => item.skills.includes('js'))\n// const arr = [1, 2, 3, 4, 5, 6, 7];\n// const arr = [{\n//     name: 'User1',\n//     skills: ['html', 'css']\n// }, {\n//     name: 'User2',\n//     skills: ['js', 'react']\n// }, {\n//     name: 'User3',\n//     skills: ['node.js', 'express']\n// }]\n\n\n\n// findIndex\n// // const result = arr.findIndex(item =>item.skills.includes('node.js'))\n// const result = arr.findIndex(item =>item.skills.includes('avadakedavra'))\n// console.log(result);\n\n\n\n// filter\n// const numbers = [1, 2, 3, 4, 5, 6, 7];\n// const result = numbers.filter((item) => !(item % 2))\n//     .map((item, _, arr) => {\n\n//         console.log(arr);\n//         return item * 2\n//     })\n// console.log(result);\n\n\n// every\n// const numbers = [22, 1, 2, 3, 4, 5, 6, 7];\n// const number2 = [2, 4, 6, 8, 10]\n// const result = numbers.every(item => !(item % 2))\n// console.log(result);\n\n// const arr = [{\n//     name: 'User1',\n//     age: 18\n// }, {\n//     name: 'User2',\n//     age: 12\n// }, {\n//     name: 'User3',\n//     age: 19\n// }]\n\n\n// const result = arr.every(user => user.age >= 18)\n// console.log(result);\n\n// some\n// const numbers = [1, 3, 4, 5, 6, 7];\n// const numbers2 = [1, 23, 43, 7, 9];\n\n\n// const result = numbers2.some(item => {\n//     console.log(item);\n//     return !(item % 2)\n// })\n// console.log(result);\n\n\n\n\n\n// sort\n\n// const numbers = [11, 4, 9, 3, 54, 23, 12]\n// const result = numbers.sort((a, b) => b - a)\n// console.log('result', result);\n// console.log('numbers', numbers);\n\n// const result = [...numbers].sort((a, b) => b - a)\n// console.log('result',result);\n// console.log('numbers',numbers);\n\n// const numbers = [11, 4, 9, 3, 54, 23, 12]\n// numbers.sort()\n// console.log(numbers);\n\n\n// const str = ['s', 'a', 'f', 'B', 'A', 'S']\n// const result = str.sort((a, b) => a - b)\n// const result = str.sort()\n// const result = str.sort((a,b) => b.localeCompare(a))\n// console.log(result);\n\n\n// const arr = [{\n//     name: 'Den',\n//     age: 18\n// }, {\n//     name: 'Slava',\n//     age: 12\n// }, {\n//     name: 'Max',\n//     age: 19\n// }]\n\n// arr.sort((a, b) => a.name.localeCompare(b.name))\n// console.table(arr);\n\n\n//reduce\n// const numbers = [11, 4, 9, 3, 54, 23, 12]\n// const result = numbers.reduce((acc, item) => {\n//     console.log('acc', acc);\n//     console.log('item', item);\n//     console.log('----------------------------------');\n//     return acc + item;\n// }, 0)\n// const numbers = [11, 4, 9, 3, 54, 23, 12];\n// const result = numbers.reduce((acc, item) => {\n//     console.log('acc', acc);\n//     console.log('item', item);\n//     acc.push(item * 2)\n//     return acc\n// }, [])\n// const numbers = [11, 4, 9, 3, 54, 23, 12];\n// const result = numbers.reduce((acc, item) => {\n//     console.log('acc', acc);\n//     console.log('item', item);\n//     return acc.push(item * 2)\n// }, [])\n\n\n\n// Перерва до 21.26 - 27\n\n\n\n\n\n\n// Колекція об'єктів для всіх прикладів з автомобілями\nconst cars = [{\n    make: 'Honda',\n    model: 'CR-V',\n    type: 'suv',\n    amount: 14,\n    price: 24045,\n    onSale: true\n},\n{\n    make: 'Honda',\n    model: 'Accord',\n    type: 'sedan',\n    amount: 2,\n    price: 22455,\n    onSale: true\n},\n{\n    make: 'Mazda',\n    model: 'Mazda 6',\n    type: 'sedan',\n    amount: 8,\n    price: 24195,\n    onSale: false\n},\n{\n    make: 'Mazda',\n    model: 'CX-9',\n    type: 'suv',\n    amount: 7,\n    price: 31520,\n    onSale: true\n},\n{\n    make: 'Toyota',\n    model: '4Runner',\n    type: 'suv',\n    amount: 19,\n    price: 34210,\n    onSale: false\n},\n{\n    make: 'Toyota',\n    model: 'Sequoia',\n    type: 'suv',\n    amount: 16,\n    price: 45560,\n    onSale: false\n},\n{\n    make: 'Toyota',\n    model: 'Tacoma',\n    type: 'truck',\n    amount: 4,\n    price: 24320,\n    onSale: true\n},\n{\n    make: 'Ford',\n    model: 'F-150',\n    type: 'truck',\n    amount: 11,\n    price: 27110,\n    onSale: true\n},\n{\n    make: 'Ford',\n    model: 'Fusion',\n    type: 'sedan',\n    amount: 13,\n    price: 22120,\n    onSale: true\n},\n{\n    make: 'Ford',\n    model: 'Explorer',\n    type: 'suv',\n    amount: 6,\n    price: 31660,\n    onSale: false\n}\n];\n// Example 1 - Метод map\n// Нехай функція getModels повертає масив моделей (поле model) всіх автомобілів.\n\n// const getModels = cars => {\n// return cars.map(car => car.model)\n// };\n// // getModels(cars)\n// console.table(getModels(cars));\n// Example 2 - Метод map\n// Нехай функція makeCarsWithDiscount повертає новий масив об'єктів із змінним значенням властивості price залежно від переданої знижки.\n\n// const makeCarsWithDiscount = (cars, discount) => {\n//     return cars.map(item => ({\n//         ...item,\n//         price : item.price * (1 - discount),\n//     }))\n// };\n\n// console.log(makeCarsWithDiscount(cars, 0.2));\n// console.log(makeCarsWithDiscount(cars, 0.4));\n\n// Example 3 - Метод filter\n// Нехай функція filterByPrice повертає масив автомобілів ціна яких менша ніж значення параметра threshold.\n\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const filterByPrice = (cars, threshold) => {\n//     return cars.filter(({price}) => price < threshold)\n// };\n\n// console.log(filterByPrice(cars, 30000));\n// console.log(filterByPrice(cars, 25000));\n\n// Example 4 - Метод filter\n// Нехай функція getCarsWithDiscount повертає масив автомобілів властивість onSale яких true.\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const getCarsWithDiscount = cars => {\n//     return cars.filter(({onSale}) => onSale)\n// };\n// const getCarsWithDiscount = cars => cars.filter(({onSale}) => onSale)\n\n// console.table(getCarsWithDiscount(cars));\n\n// Example 5 - Метод filter\n// Нехай функція getCarsWithType повертає масив автомобілів тип яких збігається зі значенням параметра type.\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const getCarsWithType = (cars, type) => cars.filter(({type : carType}) => carType === type);\n\n// console.table(getCarsWithType(cars, 'suv'));\n// console.table(getCarsWithType(cars, 'sedan'));\n\n\n// const getFord = (cars, carPrice) => cars.filter(({\n//     price\n// }) => price < carPrice).filter(({\n//     make\n// }) => make === \"Honda\")\n\n\n// const getFord = (cars, carPrice, carName) => cars.filter(({\n//     make,\n//     price\n// }) => price < carPrice && make === carName)\n// console.log(getFord(cars, 25000, 'Ford'));\n// Example 6 - Метод find\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const getCarByModel = (cars, model) => cars.find(({\n//     model: carModel\n// }) => model === carModel);\n\n// console.log(getCarByModel(cars, 'F-150'));\n// console.log(getCarByModel(cars, 'CX-9'));\n// Example 7 - Метод sort\n// Нехай функція sortByAscendingAmount повертає новий масив автомобілів відсортований за зростанням значення властивості amount.\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const sortByAscendingAmount = cars => cars.sort((a, b) => a.price - b.price);\n// const sortByAscendingAmount = cars => [...cars].sort(({price:a}, {price :b}) => a - b);\n// console.log(cars);\n// console.table(sortByAscendingAmount(cars));\n// Example 8 - Метод sort\n// Нехай функція sortByDescendingPrice повертає новий масив автомобілів відсортований за зменшенням значення властивості price.\n\n// const sortByDescendingPrice = cars => [...cars].sort((a,b)=> b.price - a.price);\n// console.log(cars);\n// console.table(sortByDescendingPrice(cars));\n// Example 9 - Метод sort\n// Нехай функція sortByModel повертає новий масив автомобілів відсортований за назвою моделі в алфавітному та зворотному алфавітному порядку, в залежності від значення параметра order.\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const sortByModel = (cars, order) => {\n//     if (order === 'asc') {\n//         return [...cars].sort((a, b) => a.model.localeCompare(b.model))\n//     } else {\n//         return [...cars].sort((a, b) => b.model.localeCompare(a.model))\n//     }\n// };\n// const sortByModel = (cars, order) => [...cars].sort(({model: a},{model: b}) => order === 'asc'\n// ? a.localeCompare(b)\n// : b.localeCompare(a));\n// const sortByModel = (cars, order) => [...cars].sort(({model: a},{model: b}) => a.localeCompare(b))\n// const sortByModel = (cars, order) => [...cars].sort(({model: a},{model: b}) => b.localeCompare(a)))\n// console.table(sortByModel(cars, 'asc'));\n// console.table(sortByModel(cars, 'desc'));\n// Example 10 - Метод reduce\n// Нехай функція getTotalAmount повертає загальну кількість автомобілів (значення властивостей amount).\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const getTotalAmount = cars => cars.reduce((acc, {amount}) => acc + amount,0);\n\n// console.log(getTotalAmount(cars));\n// Example 11 - Ланцюжки методів\n// Нехай функція getAvailableCarNames повертає масив моделей автомобілів, але тільки тих, які зараз на розпродажі.\n// {\n//     make: 'Ford',\n//     model: 'Explorer',\n//     type: 'suv',\n//     amount: 6,\n//     price: 31660,\n//     onSale: false\n// }\n// const getModelsOnSale = cars => cars.filter(({onSale}) => onSale).map(({model}) => model);\n\n// const getModelsOnSale = cars => cars.filter(({onSale}) => onSale).map(({make, model}) => `${make} ${model}`);\n\n// console.log(getModelsOnSale(cars));\n\n\n\n// Example 12 - Ланцюжки методів\n// Нехай функція getSortedCarsOnSale повертає масив автомобілів на розпродажі (Властивість onSale), відсортованих за зростанням ціни.\n\n\n/**\n* Get cars on sale and sort them\n* @param {Array} cars - Array with object\n* @returns {Array} - sorted array on sale\n*/\n// const getSortedCarsOnSale = cars => cars.filter(({onSale}) => onSale).sort((a,b) => a.price - b.price);\n// console.log('cars',cars);\n// console.log(getSortedCarsOnSale(cars));\n\n\n// const str = 'duaguidgasuidgauisdhasudasdfhsgvfakhfugduashc';\n// const result = str.split('').reduce((acc, item) => {\n//     // acc.hasOwnProperty(item) ? acc[item] += 1 : acc[item] = 1;\n//     // item in acc ? acc[item] += 1 : acc[item] = 1;\n\n//     const keys = Object.keys(acc)\n//     keys.includes(item) ? acc[item] += 1 : acc[item] = 1;\n\n//     return acc\n// }, {})\n// console.log(result);\n// // {\n//     d: 7,\n//     u: 7,\n//     a: 7\n// }\n\n\n\n// const arr = ['Honda', 'Audi', 'BMW', \"Skoda\", \"Ford\", 'Renault']\n\n// Загальна кількість авто 6:\n// 1 Honda\n// 2 Audi\n\n\n// 6 Reno\n\n// const arr = [];\n\n// Вибачте авто немає\n// function logCars(arr) {\n//     const result = arr.reduce((acc, car, idx) => {\n//         // console.log(`${idx+1} - ${car}\\n`);\n//         return acc + `${idx+1} - ${car}\\n`\n//     }, arr.length ? `Загальна кількість авто ${arr.length}: \\n` : `Вибачте авто немає 😥 ${foo()}`);\n//     console.log('------------------------------------------------------------------');\n//     return result\n// }\n\n// function foo(){\n//     return 'Hello from foo function'\n// }\n// console.log(logCars(['Honda', 'Audi', 'BMW', \"Skoda\", \"Ford\", 'Renault']));\n// console.log(logCars([]));\n\n\n\n// const fruitBasket = ['banana', 'cherry', 'orange', 'apple', 'cherry', 'orange', 'apple', 'banana', 'cherry', 'orange', 'fig'];\n// const count = fruitBasket.reduce((acc, fruit) => {\n//     // {\n//         // \"banana\" : 1\n//         // \"cherry\" : 3\n//     // }\n//     acc[fruit] = (acc[fruit] || 0) + 1;// якщо ключа ще не було створено\n//     // acc[fruit] = (0) + 1;// => 1\n//     // acc[fruit] = (acc[fruit] || 0) + 1;якщо ключ вже існує\n//     // acc[fruit] = acc[fruit]  + 1;\n//     return acc;\n// }, {})\n// count // { banana: 2, cherry: 3, orange: 3, apple: 2, fig: 1 }\n\n// const user = {}\n// user.age\n\n\n// const result = 2 === 2 ? 'Yes' : 'NO'\n// console.log(result);\n\n// const str = 'asdaskfjnaskjfnmaeklsmflasfasdsapoldwa';\n// const obj = abc => [...abc].reduce((acc, item) => {\n//     // console.log(acc);\n//     // acc.hasOwnProperty(item) ? (acc[item] += 1) : (acc[item] = 1);   \n//     // acc[item] = (acc[item] || 0) + 1\n//     return acc;\n// }, {});\n\n\n// console.log(obj(str));\n\n// const allCourses = ['html', 'js', \"css\", 'js']\n// const uniqueCourses = allCourses.filter((course, index, array) => array.indexOf(course) === index);\n//                                     //   'html'   0                     0                      0\n//                                     //    \"js\"    1                     1                      1 \n//                                     //    \"css\"   2                     2                      2 \n//                                     //    'js'    3                     1                      3\n\n\n\n// declaration expression\n// function foo(){\n\n// }\n\n// const foo = function () {}\n\n\n\n// arrow function\n\n// const foo = () => {}\n\n// 'use strict'\n// function foo(){\n//     console.log(this);\n// }\n\n// foo();\n\n// const boo = function (){\n//     console.log(this);\n// }\n\n// boo()\n\n\n// const arrow = () => {\n//     console.log(this);\n// }\n// arrow()\n\n\n// const objA ={\n//     name : 'User name',\n//     nickName(){\n//         console.log(this);\n//     }\n// }\n\n// objA.nickName()\n\n// const objB ={\n//     name : 'User name',\n//     nickName: () => {\n//         console.log(this);\n//     }\n// }\n\n// objB.nickName()\n\n\n\n// const objA ={\n//     name : 'User name',\n//     skills:{\n//         mySkill : 'html',\n//         nickName(){\n//             console.log(this);\n//         }\n//     }\n\n// }\n\n// objA.skills.nickName()\n\n\n// const objA = {\n//     name: 'User name',\n//     skills: {\n//         mySkill: 'html',\n//         someValue: {\n//             value: 10,\n//             nickName() {\n//                 console.log(this);\n//             }\n//         }\n//     }\n// }\n\n// objA.skills.someValue.nickName()\n\n// 'use strict'\n// const objB = {\n//     name: 'User name',\n//     skills: {\n//         mySkill: 'html',\n//         someValue: {\n//             value: 10,\n//             foo() {\n//                 console.log('foo', this);\n\n//                 function nickName() {\n//                     console.log('nickName', this);\n//                 }\n//                 nickName()\n//             }\n//         }\n//     }\n// }\n\n// objB.skills.someValue.foo()\n\n\n// const objA ={\n//     age: 22,\n//     myAge(){\n//         console.log(this);\n//     }\n// }\n// objA.myAge()\n\n\n// const objA ={\n//     age: 22,\n//     myAge: () => {\n//         const test = ()=> {\n//             console.log(this);\n//             test()\n//         }\n//     }\n// }\n// objA.myAge()\n\n\n// const objA = {\n//     age: 22,\n//     myAge() {\n//         const test = () => {\n//             console.log(this);\n//             test()\n//         }\n//     }\n// }\n// objA.myAge()\n\n// 'use strict'\n// const objA = {\n//     age: 22,\n//     myAge() {\n//         function test() {\n//             console.log(this);\n\n//         }\n//         test()\n//     }\n// }\n// objA.myAge()\n\n\n\n// const objA = {\n//     age: 22,\n//     skilss: {\n//         skill: ['html', \"css\"],\n//         foo() {\n//             const boo = () => {\n//                 console.log(this);\n//             }\n//             boo()\n//         }\n//     }\n// }\n// objA.skilss.foo()\n\n\n\n\n\n\n\n\n// const objA = {\n//     age: 22,\n//     myAge() {\n//         const test = () => {\n//             console.log(this);\n//         }\n//         test()\n//     }\n// }\n\n\n// const objB = {\n//     age:12,\n//     someFunction: objA.myAge\n// }\n// objB.someFunction()\n\n\n\n\n// const objA = {\n//     age: 22,\n//     myAge() {\n//         const test = () => {\n//             console.log(this);\n//         }\n//         test()\n//     }\n// }\n\n// const objB = {\n//     age:12,\n//     someFunction: objA.myAge\n// }\n\n\n\n// const objc = {\n//     age:13,\n//     somecrazy: objB.someFunction\n// }\n// objc.somecrazy()\n\n\n// 'use strict'\n// const objA = {\n//     name: \"A\",\n//     foo:()=>{\n//         console.log(this);\n//     }\n// }\n// objA.foo()\n// const win = {\n\n// }\n\n// function foo(){\n//     const a = this.test;\n// }\n\n// foo();\n\n\n\n// call\n// apply\n// bind\n\n\n\n\n// const objA = {\n//     name: 'A',\n//     //   10, 20 30 40\n//     myAge(a, b, c, d) {\n//         console.log(this, a, b, c, d);\n//         return 'Some value'\n//     }\n// }\n\n// // objA.myAge(22, 44)\n\n// const objB = {\n//     name: 'B',\n//     // myAge: objA.myAge\n// }\n// const objC = {\n//     name: 'C',\n//     // myAge: objA.myAge\n// }\n// objA.myAge.call(objB, 1, 2)\n// objA.myAge.call(objC, 10, 20)\n// objA.myAge.apply(objB, [1, 2])\n// const fromBackEnd = [10, 20, 30, 40];\n// const str1 = objA.myAge.call(objC, 10, 20, 30, 40);\n// const str = objA.myAge.call(objC, ...fromBackEnd);\n// console.log(str);\n// objA.myAge.apply(objC, fromBackEnd);\n\n\n\n\n\n// const objA = {\n//     name: 'A',\n//     myAge(a, b, c, d) {\n//         // console.log(arguments);\n//         console.log(this, a, b, c, d);\n//         return 'Some value'\n//     }\n// }\n\n// const objB = {\n//     name: 'B'\n// }\n\n// const objC = {\n//     name: 'C'\n// }\n\n// const result = objA.myAge.bind(objB);\n// const result2 = objA.myAge.bind(objC);\n// objA.myAge()\n// result(999, 888)\n// result2(111, 222, 333, 444)\n// result2(111, 222, 333, 444)\n// result2(111, 222, 333, 444)\n\n// result()\n// result()\n\n\n\n\n\n// ПЕРЕРВА ДО 21-27\n\n\n\n\n\n\n// Example 1 - Майстерня коштовностей\n// Напишіть метод calcTotalPrice(stoneName), який приймає назву каменю і розраховує та повертає загальну вартість каменів з таким ім'ям, ціною та кількістю з властивості stones.\n\n// const chopShop = {\n//     stones: [{\n//             name: 'Emerald',\n//             price: 1300,\n//             quantity: 4\n//         },\n//         {\n//             name: 'Diamond',\n//             price: 2700,\n//             quantity: 3\n//         },\n//         {\n//             name: 'Sapphire',\n//             price: 1400,\n//             quantity: 7\n//         },\n//         {\n//             name: 'Ruby',\n//             price: 800,\n//             quantity: 2\n//         },\n//     ],\n//     calcTotalPrice(stoneName) {\n//         const {\n//             price,\n//             quantity\n//         } = this.stones.find(({\n//             name\n//         }) => name === stoneName)\n//         return price * quantity;\n//     },\n// };\n// const shop2 = {\n//     stones: [{\n//             name: 'Щебінь',\n//             price: 1300,\n//             quantity: 4\n//         },\n//         {\n//             name: 'Пісок',\n//             price: 2700,\n//             quantity: 3\n//         },\n//     ],\n// }\n// console.log(chopShop.calcTotalPrice.call(shop2, 'Щебінь'));\n// console.log(chopShop.calcTotalPrice('Emerald')); // 5200\n// console.log(chopShop.calcTotalPrice('Diamond')); // 8100\n// console.log(chopShop.calcTotalPrice('Sapphire')); // 9800\n// console.log(chopShop.calcTotalPrice('Ruby')); // 1600\n\n\n// Example 2 - Телефонна книга\n// Виконайте рефакторинг методів об'єкту phonebook щоб код запрацював.\n\n// const phonebook = {\n//   contacts: [],\n//   add(contact) {\n//     const newContact = {\n//       list: 'default',\n//       ...contact,\n//       id: this.generateId(),\n//       createdAt: this.getDate(),\n//     };\n//     this.contacts.push(newContact);\n//     return this.contacts\n//   },\n//   generateId() {\n//     return '_' + Math.random().toString(36).substr(2, 9);\n//   },\n//   getDate() {\n//     return Date.now();\n//   },\n// };\n\n// console.log(\n//   phonebook.add({\n//     name: 'Mango',\n//     email: 'mango@mail.com',\n//     list: 'friends',\n//   }),\n// );\n// console.log(\n//   phonebook.add({\n//     name: 'Poly',\n//     email: 'poly@hotmail.com',\n//   }),\n// );\n\n\n\n// Example 3 - Калькулятор\n// Створіть об'єкт calculator з трьома методами:\n\n// read(a, b)- приймає два значення та зберігає їх як властивості об'єкта.\n// add() - повертає суму збережених значень.\n// mult() - перемножує збережені значення та повертає результат.\n// const calculator = {\n//     read(a, b) {\n//         this.a = a;\n//         this.b = b ?? 0;\n//     },\n//     add() {\n//         return (this.a ?? 0) + (this.b ?? 0);\n//     },\n//     mult() {\n//         return (this.a ?? 1) * (this.b ?? 1);\n//     }\n// };\n// calculator.read(3)\n// console.log(calculator.mult());\n// // console.log(calculator.add());\n\n// console.log(calculator);\n\n\n\n// https://javascriptpatterns.vercel.app/patterns/design-patterns/factory-pattern\n\n// console.log(typeof NaN); //number\n// Number.isNaN()\n// console.log(typeof null); //object\n\n// console.log(null > 0); //false\n// console.log(Number(null));\n// console.log(null < 0); //false\n// console.log(Number(null));\n// console.log(null == 0); //false\n// console.log(null >= 0); //true\n// console.log(Number(null));\n// console.log(Math.min() > Math.max()); //true\n// console.log((!+[] + [] + ![]).length); //9\n// Самостійне опрацювання\n// Напишіть клас Toggle який приймає об'єкт налаштувань {isOpen: boolean} і оголошує одну властивість on - стан вкл/викл (true/false). За замовчуванням значення властивості on повинно бути false.\n\n// class Toggle {\n//   constructor({ isOpen = false } = {}) {\n//     this.on = isOpen;\n//   }\n//   toggle(){\n//     this.on = !this.on;\n//   }\n// }\n\n// const firstToggle = new Toggle({ isOpen: true });\n// console.group(\"firstToggle\");\n// console.log(firstToggle.on);\n// firstToggle.toggle();\n// console.log(firstToggle.on);\n// firstToggle.toggle();\n// console.log(firstToggle.on);\n// firstToggle.toggle();\n// console.log(firstToggle.on);\n// console.groupEnd(\"firstToggle\");\n\n// const secondToggle = new Toggle();\n// console.group(\"secondToggle\");\n// console.log(secondToggle.on);\n// secondToggle.toggle();\n// console.log(secondToggle.on);\n// console.groupEnd(\"secondToggle\");\n\n// const arr = [1, 1, 1, [1, 1, [1, 1]]];\n\n// function sum(arr) {\n//   let total = 0;\n//   for (const item of arr) {\n//     if (Array.isArray(item)) {\n//       total += sum(item);\n//     } else {\n//       total += item;\n//     }\n//   }\n//   return total\n// }\n// console.log(sum(arr));\n\n// const arr = [\n//   1,\n//   1,\n//   1,\n//   [\n//     1,\n//     1,\n//     [\n//       1,\n//       1,\n//       [\n//         1,\n//         1,\n//         1,\n//         [1, 1, [1, 1, [1, 1, 1, [1, 1, [1, 1, [1, 1, 1, [1, 1, [1, 1]]]]]]]],\n//       ],\n//     ],\n//   ],\n// ];\n\n// function sumArray(arr) {\n//   let sum = 0;\n//   arr.forEach((elem) => {\n//     if (typeof elem === \"number\") {\n//       sum += elem;\n//     } else if (Array.isArray(elem)) {\n//       sum += sumArray(elem);\n//     }\n//   });\n//   return sum;\n// }\n\n// console.log(sumArray(arr));\n\n// function foo(item) {\n//   const test = 10;\n//   const userName = \"Artem\";\n//   const value = item > test;\n// const fn = function (age) {\n//     const str = `Hello my name ${userName} I\\`m ${age} yers old`;\n//     console.log(test);\n//     console.log(value);\n//     return str;\n//   }\n//   const fn2 = function (age) {\n//     const str = `Привіт мене звати ${userName} мені ${age} років`;\n//     console.log(test);\n//     console.log(value);\n//     return str;\n//   };\n//   return value\n//     ? fn\n//     : fn2\n// }\n\n// const result = foo(11);\n// const example = result(28)\n// console.log(example);\n// const arr = [1,2,3,4];\n// arr.forEach(item => {\n//     if(item > 0){\n//     //    continue;\n//     }\n//     console.log('After if');\n// })\n\n// function padEnd(str) {\n//     console.log(this);\n//     console.log(str);\n//     // return this.value + str\n//     return this.value.padEnd(this.value.length + str.length, str)\n//   }\n\n//   console.log(padEnd.call({value: '^.'}, '^'));\n\n// class StringBuilder {\n//   constructor(initialValue) {\n//     this.value = initialValue;\n//     console.log(initialValue);\n//   }\n//   getValue() {\n//     return this.value;\n//   }\n//   padEnd(str) {\n//     // this.value += str;\n//     this.value = this.value.padEnd(this.value.length + str.length, str);\n//   }\n//   padStart(str) {\n//     // console.log(typeof this.value, typeof str);\n//     // this.value = str + this.value;\n//     this.value = this.value.padStart(this.value.length + str.length, str);\n//   }\n//   padBoth(str) {\n//     this.value = str + this.value + str;\n//   }\n// }\n\n// // Change code above this line\n// const builder = new StringBuilder(\".\");\n// console.log(builder.getValue()); // \".\"\n// builder.padStart(\"^\");\n// console.log(builder.getValue()); // \"^.\"\n// builder.padEnd(\"^\");\n// console.log(builder.getValue()); // \"^.^\"\n// builder.padBoth(\"=\");\n// console.log(builder.getValue()); // \"=^.^=\"\n// function foo(a,b) {\n//     console.log(this); // window\n//     return a * b;\n// }\n\n// const result = foo.bind(null, 2);\n// console.log(result(2));\n// Можемо розібрати ? Яким буде результат виконання (2,4,NaN, помилка ?)\n\n// const arr = [14, 45, 13, 55, 213, 11];\n\n// for(const num of arr){\n//     // if(num < 50){\n//     //     // continue;\n//     //     // break;\n//     //     console.log(num);\n//     // }\n//     console.log(num);\n// }\n\n// const foo = function(){\n//     console.log('expression');\n// }\n// foo()\n// boo()\n// function boo(){\n//     console.log('declaration');\n// }\n// console.log(Math.min() > Math.max())"],"names":["$592093600602af41$var$idx","indexOf","console","log","Boolean","name","age","languages","html","css","js","ReactNative","sayHello","this","iKnow","keys","Object","key"],"version":3,"file":"task-21.9c0bd7b0.js.map"}