{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_class_extract_field_descriptor.js","node_modules/@swc/helpers/lib/_class_apply_descriptor_get.js","node_modules/@swc/helpers/lib/_check_private_redeclaration.js","node_modules/@swc/helpers/lib/_class_apply_descriptor_set.js","node_modules/@swc/helpers/lib/_class_private_field_get.js","node_modules/@swc/helpers/lib/_class_private_field_init.js","node_modules/@swc/helpers/lib/_class_private_field_set.js","node_modules/@swc/helpers/lib/_class_private_method_get.js","node_modules/@swc/helpers/lib/_class_private_method_init.js","node_modules/@swc/helpers/lib/_define_property.js","src/js/task-19.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classExtractFieldDescriptor;\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classApplyDescriptorGet;\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n    if (descriptor.get) {\n        return descriptor.get.call(receiver);\n    }\n    return descriptor.value;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _checkPrivateRedeclaration;\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n    if (privateCollection.has(obj)) {\n        throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classApplyDescriptorSet;\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n    if (descriptor.set) {\n        descriptor.set.call(receiver, value);\n    } else {\n        if (!descriptor.writable) {\n            // This should only throw in strict mode, but class bodies are\n            // always strict and private fields can only be used inside\n            // class bodies.\n            throw new TypeError(\"attempted to set read only private field\");\n        }\n        descriptor.value = value;\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldGet;\nvar _classExtractFieldDescriptor = _interopRequireDefault(require(\"./_class_extract_field_descriptor\"));\nvar _classApplyDescriptorGet = _interopRequireDefault(require(\"./_class_apply_descriptor_get\"));\nfunction _classPrivateFieldGet(receiver, privateMap) {\n    var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, \"get\");\n    return (0, _classApplyDescriptorGet).default(receiver, descriptor);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateFieldInit(obj, privateMap, value) {\n    (0, _checkPrivateRedeclaration).default(obj, privateMap);\n    privateMap.set(obj, value);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateFieldSet;\nvar _classExtractFieldDescriptor = _interopRequireDefault(require(\"./_class_extract_field_descriptor\"));\nvar _classApplyDescriptorSet = _interopRequireDefault(require(\"./_class_apply_descriptor_set\"));\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n    var descriptor = (0, _classExtractFieldDescriptor).default(receiver, privateMap, \"set\");\n    (0, _classApplyDescriptorSet).default(receiver, descriptor, value);\n    return value;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodGet;\nfunction _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return fn;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classPrivateMethodInit;\nvar _checkPrivateRedeclaration = _interopRequireDefault(require(\"./_check_private_redeclaration\"));\nfunction _classPrivateMethodInit(obj, privateSet) {\n    (0, _checkPrivateRedeclaration).default(obj, privateSet);\n    privateSet.add(obj);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","// const user = {\n//     name: \"test user a\",\n//     age: 18,\n//     sayHello() {\n//         console.log(this.name);\n//     },\n//     showAge() {\n//         console.log(` My age ${this.age}`);\n//     }\n// }\n\n\n// const user1 = Object.create(user);\n// user1.name = 'test user 1'\n// user1.sayHello();\n// console.log('user1',user1);\n// const user2 = Object.create(user);\n// user2.showAge();\n// console.log('user2',user2);\n\n\n\n\n\n\n// const user = {\n//     name: \"test user a\",\n//     age: 33,\n//     sayHello() {\n//         console.log(this.name);\n//     },\n// }\n\n\n// const admin = Object.create(user)\n// admin.showAge = function(){\n//     console.log(this.age);\n// }\n\n\n// const practiceOwner = Object.create(admin);\n\n// practiceOwner.name = 'Owner';\n// // practiceOwner.showAge()\n\n// // practiceOwner.sayHello()\n// console.log(practiceOwner);\n// user.showAge()\n\n\n\n\nclass User {\n    static counter = 0;\n    static addUser() {\n        // User.counter +=1;\n        this.counter += 1;\n        console.log(`Number of users ${this.counter}`);\n    }\n    #location\n    constructor({\n        name,\n        email,\n        age = 18,\n        location = 'World',\n        password\n    } = {}) {\n        this.name = name;\n        this.email = email;\n        this.age = age;\n        this.#location = location;\n        this.password = password;\n        User.addUser()\n    }\n    sayHello() {\n        console.log(this.name);\n    }\n\n    #getEmail() {\n        console.log(this.email);\n    }\n    get locale() {\n        return this.#location\n    }\n    set locale(city) {\n        const value = prompt('Enter password');\n        this.#getEmail()\n        if (value === this.password) {\n            this.#location = city\n            console.log(this.#location);\n        } else {\n            console.log('Хацкер ? 😱');\n        }\n    }\n\n}\n\n\nclass Avatar extends User {\n    // constructor({\n    //     name,\n    //     email,\n    //     location,\n    //     password,\n    //     age,\n    //     damage\n    // }) {\n    //     super({\n    //         name,\n    //         email,\n    //         location,\n    //         password,\n    //         age\n    //     })\n    //     this.damage = damage;\n    // }\n    constructor({damage, ...args}) {\n        super(args)\n        this.damage = damage;\n    }\n\n    attack() {\n        console.log(`Attack with damage ${this.damage}`);\n    }\n}\n\nclass Zombi extends User {\n    constructor({\n        name,\n        email,\n        location,\n        password,\n        age,\n        poison\n    }) {\n        super({\n            name,\n            email,\n            location,\n            password,\n            age\n        })\n        this.poison = poison\n    }\n\n    toBite(){\n        console.log(`Bite with ${this.poison}`);\n    }\n}\n\n\nclass Dog extends Zombi {\n    constructor(){\n        super()\n    }\n}\n\nconst test = new Avatar({\n    name: 'User A',\n    email: 'test@gmail.com',\n    location: 'Lviv',\n    password: \"qwerty111\",\n    damage: 700\n});\nconst test1 = new Zombi({\n    name: 'User B',\n    email: 'gmail@gmail.com',\n    age: 99,\n    poison: 500\n});\nconsole.log(test);\nconsole.log(test1);\n// // test.#getEmail()\n// // test.sayHello()\n\n// // console.log(test.locale);\n// // test.locale = 'Dnipro';\n\n// const test2 = new User({\n//     name: 'User C',\n//     email: 'gmail1@gmail.com',\n//     age: 92\n// });\n\n\n\n// Перерва до 21.35\n\n// Example 1 - Блогер\n// Напиши клас Blogger для створення об'єкта блогера з наступними властивостями:\n\n// email - пошта, рядок\n// age - вік, число\n// numberOfPosts - кількість постів, число\n// topics - масив тем на яких спеціалізується блогер\n// Клас чекає один параметр - об'єкт налаштувань з однойменними властивостями.\n\n// Додай метод getInfo(), який, повертає рядок: User ${пошта} is ${вік} years old and has ${кількість постів} posts.\n\n// Додай метод updatePostCount(value), який у параметрі value приймає кількість постів, які потрібно додати користувачеві.\n// class Blogger {\n//     constructor({\n//         name,\n//         age,\n//         numberOfPosts,\n//         topics\n//     }) {\n//         this.email = name;\n//         this.age = age;\n//         this.numberOfPosts = numberOfPosts;\n//         this.topics = topics;\n//     }\n//     getInfo() {\n//         return `User ${this.email} is ${this.age} years old and has ${this.numberOfPosts} posts.`\n//     }\n//     updatePostCount(value){\n//         this.numberOfPosts +=value\n//     }\n// }\n\n\n// const mango = new Blogger({\n//     name: 'mango@mail.com',\n//     age: 24,\n//     numberOfPosts: 20,\n//     topics: ['tech', 'cooking'],\n// });\n// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts\n// mango.updatePostCount(5);\n// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts\n\n// const poly = new Blogger({\n//     name: 'poly@mail.com',\n//     age: 19,\n//     numberOfPosts: 17,\n//     topics: ['sports', 'gaming', 'health'],\n// });\n// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts\n// poly.updatePostCount(4);\n// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts\n\n\n\n// Example 2 - Сховище\n// Напиши клас Storage який створює об'єкти для керування складом товарів. При виклику отримуватиме один аргумент - початковий масив товарів і записуватиме його властивість items.\n\n// Додай методи класу:\n\n// getItems() - повертає масив товарів.\n// addItem(item) - отримує новий товар і додає його до поточних.\n// removeItem(item) - отримує товар і, якщо він є, видаляє його з поточних.\n// -(x + 1)\n// 0 => false\n// -1 => true\n// -(0 + 1) => -1 => true\n// -(-1 + 1) => -0 => false\n// console.log(!!0); Boolean(0)\n// class Storage {\n//     constructor(items) {\n//         this.items = items\n//     }\n//     getItems() {\n//         return this.items;\n//     }\n//     addItem(item) {\n//         if (!this.items.includes(item)) {\n//             this.items.push(item)\n//             return\n//         }\n\n//         console.log('Такий товар вже є');\n//     }\n//     removeItem(item) {\n//         const idx = this.items.indexOf(item);\n//         if (this.items.includes(item)) { //!!~idx\n//             this.items.splice(idx, 1);\n//         }\n\n//     }\n// }\n// const storage = new Storage(['🍎', '🍋', '🍇', '🍑']);\n\n// const items = storage.getItems();\n// console.table(items); // [ '🍎', '🍋', '🍇', '🍑' ]\n\n// storage.addItem('🍌');\n// console.table(storage.items); // [ '🍎', '🍋', '🍇', '🍑', '🍌' ]\n\n// storage.removeItem('🍋');\n// console.table(storage.items); // [ '🍎', '🍇', '🍑', '🍌' ]\n\n// Example 3 - User\n// Напиши клас User який створює об'єкт із властивостями login та email. Оголоси приватні властивості #login та #email, доступ до яких зроби через гетер та сетер login та email.\n\n// class User {\n//     #login;\n//     #email;\n//     constructor({\n//         login,\n//         email\n//     }) {\n//         this.#login = login;\n//         this.#email = email;\n//     }\n//     get login() {\n//         return this.#login;\n//     }\n//     set login(newLogin) {\n//         if(this.#login !== newLogin){\n//             this.#login = newLogin;\n//         }\n//     }\n//     get email() {\n//         return this.#email;\n//     }\n//     set email(newEmail) {\n//         if(this.#email !== newEmail){\n//             this.#email = newEmail;\n//         }\n//     }\n// }\n\n\n// const mango = new User({\n//     #login: 'Mango',\n//     email: 'mango@dog.woof',\n// });\n// mongo.login = 'a'\n// console.log(mango.login); // Mango\n// mango.login = 'Mangodoge';\n// console.log(mango.login); // Mangodoge\n\n// const poly = new User({\n//     login: 'Poly',\n//     email: 'poly@mail.com',\n// });\n\n// console.log(poly.login); // Poly\n// poly.login = 'Polycutie';\n// console.log(poly.login); // Polycutie\n\n\n\n// Example 4 - Нотатки\n// Напиши клас Notes який керує колекцією нотаток у властивості items. Замітка це об'єкт із властивостями text та priority. Додай класу статичну властивість Priority, у якому зберігатиметься об'єкт із пріоритетами.\n\n// {\n//   LOW: 'low',\n//   NORMAL: 'normal',\n//   HIGH: 'high'\n// }\n// Додай методи addNote(note), removeNote(text) та updateNote(text, newPriority).\n\nclass Notes {\n    static Priority = {\n        LOW: 'low',\n        NORMAL: 'normal',\n        HIGH: 'high'\n    }\n    constructor(note) {\n        this.items = note;\n    }\n    addNote(note) {\n        const inArr = this.items.some(({\n            text\n        }) => text === note.text)\n        if (!inArr) {\n            this.items.push(note)\n        }\n    }\n    removeNote(text) {\n        const idx = this.items.findIndex(({\n            text: noteText\n        }) => noteText === text);\n        if (!!~idx) { //idx !== -1  idx > -1\n            this.items.splice(idx, 1)\n        }\n    }\n    updateNote(text, newPriority) {\n        const idx = this.items.findIndex(({\n            text: noteText\n        }) => noteText === text);\n        if (!!~idx) { //idx !== -1  idx > -1\n            this.items[idx].priority = newPriority\n        }\n    }\n}\n\nconst myNotes = new Notes([]);\n\nmyNotes.addNote({\n    text: 'Моя перша замітка',\n    priority: Notes.Priority.LOW\n});\nmyNotes.addNote({\n    text: ['Моя перша замітка'],\n    priority: Notes.Priority.LOW\n});\nmyNotes.addNote({\n    text: 'Моя перша замітка',\n    priority: Notes.Priority.LOW\n});\nconsole.log(myNotes.items);\n\nmyNotes.addNote({\n    text: 'Моя друга замітка',\n    priority: Notes.Priority.NORMAL,\n});\nconsole.log(myNotes.items);\n\nmyNotes.removeNote('Моя перша замітка');\nconsole.log(myNotes.items);\n\nmyNotes.updateNote('Моя друга замітка', Notes.Priority.HIGH);\nconsole.log(myNotes.items);\n\n\n\n\n// Самостійне опрацювання\n// Напишіть клас Toggle який приймає об'єкт налаштувань {isOpen: boolean} і оголошує одну властивість on - стан вкл/викл (true/false). За замовчуванням значення властивості on повинно бути false.\n\n// const firstToggle = new Toggle({ isOpen: true });\n// console.group('firstToggle');\n// console.log(firstToggle.on);\n// firstToggle.toggle();\n// console.log(firstToggle.on);\n// console.groupEnd('firstToggle');\n\n// const secondToggle = new Toggle();\n// console.group('secondToggle');\n// console.log(secondToggle.on);\n// secondToggle.toggle();\n// console.log(secondToggle.on);\n// console.groupEnd('secondToggle');"],"names":["Object","defineProperty","module","exports","value","default","receiver","privateMap","action","has","TypeError","get","descriptor","call","obj","privateCollection","set","writable","$e13576b86460cc50$exports","$e13576b86460cc50$var$_classExtractFieldDescriptor","$e13576b86460cc50$var$_classApplyDescriptorGet","$e13576b86460cc50$var$_interopRequireDefault","parcelRequire","__esModule","$bb98491953509995$exports","$bb98491953509995$var$_checkPrivateRedeclaration","$c36c16f840444775$exports","$c36c16f840444775$var$_classExtractFieldDescriptor","$c36c16f840444775$var$_classApplyDescriptorSet","$c36c16f840444775$var$_interopRequireDefault","$c9f733bc98e3bbfd$exports","privateSet","fn","$60afe4cd2804d2bb$exports","$60afe4cd2804d2bb$var$_checkPrivateRedeclaration","add","$60afe4cd2804d2bb$var$_interopRequireDefault","$da4b248c00322402$exports","key","enumerable","configurable","$b176e94baaac0aec$var$_location","WeakMap","$b176e94baaac0aec$var$_getEmail","WeakSet","$b176e94baaac0aec$var$User","static","this","counter","console","log","sayHello","name","locale","$parcel$interopDefault","city","prompt","$b176e94baaac0aec$var$getEmail","password","constructor","email","age","location","addUser","$b176e94baaac0aec$var$Zombi","toBite","poison","super","$b176e94baaac0aec$var$test","attack","damage","args","$b176e94baaac0aec$var$test1","$b176e94baaac0aec$var$Notes","addNote","note","items","some","text","push","removeNote","idx","findIndex","noteText","splice","updateNote","newPriority","priority","LOW","NORMAL","HIGH","$b176e94baaac0aec$var$myNotes","Priority"],"version":3,"file":"task-19.1b4676b7.js.map"}