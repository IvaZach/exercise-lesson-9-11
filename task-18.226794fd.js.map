{"mappings":"AA4FA,MAAMA,EAAaC,SAASC,cAAc,cACpCC,EAAaF,SAASC,cAAc,WACpCE,EAAOH,SAASC,cAAc,YAC9BG,EAAgBJ,SAASC,cAAc,sBAE7CC,EAAWG,iBAAiB,SAE5B,WACID,EAAcE,mBAAmB,YAJtB,qC,IAQfP,EAAWM,iBAAiB,UAG5B,SAAqBE,GACjBA,EAAIC,iBACJ,MAAMC,EAAO,IAAIC,SAASH,EAAII,gBAgBlCC,eAA4BC,GACxB,MAAMC,EAAQD,EAAIE,KAAIH,MAAMI,IACxB,MAAMC,QAAaC,MAAM,uCAAuCF,KAChE,IAAKC,EAAKE,GACN,MAAM,IAAIC,MAGd,OAAOH,EAAKI,MAAM,IAGhBZ,QAAaa,QAAQC,WAAWT,GAGtC,OAFmBL,EAAKe,QAAO,EAACC,OAAEA,KAAwB,cAAXA,IAAwBV,KAAI,EAACW,MAAEA,KAAYA,EAAM,I,EAzBhGC,CADYlB,EAAKmB,OAAO,WAAWJ,QAAOR,GAAQA,IAAMD,KAAIC,GAAQA,EAAKa,UAEpEC,MAAKlB,MAAMK,IACR,MAAMc,EAAWd,EAAKF,KAAI,EAACiB,QAAEA,KAAcA,EAAQ,KAC7CC,QA2BlBrB,eAA0BC,GACtB,MAAMqB,EAAW,+BACXC,EAAU,kCAGVrB,EAAQD,EAAIE,KAAIH,MAAMwB,IACxB,MAAMC,EAAS,IAAIC,gBAAgB,CAC/BC,IAAKJ,EACLK,EAAGJ,EACHK,KAAM,OAGJxB,QAAaC,MAAM,GAAGgB,kBAAyBG,KAErD,IAAKpB,EAAKE,GACN,MAAM,IAAIC,MAAMH,EAAKyB,YAGzB,OAAOzB,EAAKI,MAAM,IAGhBZ,QAAaa,QAAQC,WAAWT,GAGtC,OAFaL,EAAKe,QAAO,EAACC,OAAEA,KAAwB,cAAXA,IAAwBV,KAAI,EAACW,MAAEA,KAAYA,G,CAjD/CiB,CAAWZ,GACxC5B,EAAKyC,UAsDjB,SAAsB/B,GAClB,OAAOA,EAAIE,KAAI,EAAG8B,SAASC,OAAEA,EAAQC,WAAWC,KAAEA,EAAIC,KAAEA,IAAUC,UAAUC,QAAEA,EAAOC,KAAEA,MACnF,gCAEMD,uBACAC,qCAEEH,WAAcD,eACrBA,iBACAF,iBACDO,KAAK,G,CAhEgBC,CAAarB,EAAe,IAEhDsB,OAAMC,GAAKC,QAAQC,IAAIF,KACvBG,SAAQ,KACLvD,EAAcwC,UAvBX,qCAwBH7C,EAAW6D,OAAO,G","sources":["src/js/task-18.js"],"sourcesContent":["// 'https://restcountries.com/v3.1/name/'\n\n\n\n// async function getCapital() {\n//     // Лише в випадку коли з даними працюємо в середині функції\n//     try {\n//         const URL = 'https://restcountries.com/v3.1/name/';\n//         const resp = await fetch(`${URL}Ukraine`);\n//         if (!resp.ok) {\n//             throw new Error(resp.statusText)\n//         }\n\n//         const data = await resp.json();\n//         console.log(data);\n//     } catch (e) {\n//         console.log(e);\n//     }\n// }\n// getCapital()\n\n\n// const arrow = async () => {}\n// const exp = async function(){}\n\n// getCapital()\n\n// const user = {\n//     async getFoo() {},\n\n//     getInfo: async function () {\n\n//     },\n//     getTest: async () => {\n\n//     }\n// }\n\n// async function getCapital() {\n//      // В випадку коли з даними працюємо за межами функції\n//     const URL = 'https://restcountries.com/v3.1/name/';\n//     const resp = await fetch(`${URL}asdfghjiok`);\n//     if (!resp.ok) {\n//         throw new Error(resp.statusText)\n//     }\n\n//     return resp.json();\n// }\n// getCapital()\n// .then(data => console.log(data))\n// .catch(e => console.log(e))\n\n\n\n\n\n\n//------------------------------------------------------//\n\n\n// async function getCapital() {\n//         const URL = 'https://restcountries.com/v3.1/name/';\n//         const arr = ['sadfghjk', 'Ukraine', 'France']\n\n//         const responses = arr.map(async (ctr) => {\n//             const resp = await fetch(`${URL}${ctr}`)\n//             if (!resp.ok) {\n//                 throw new Error('Not found')\n//                 // Promise.reject('Not found')\n//             }\n//             return resp.json()\n//         })\n\n//         const prom = await Promise.allSettled(responses)\n//         return prom;\n// }\n\n// getCapital()\n// .then(data => {\n//     const res = data.filter(({status}) => status === 'fulfilled').map(({value}) => value[0])\n//     const rej = data.filter(({status}) => status === 'rejected')\n// })\n// .catch(e => console.log(e))\n\n\n// Перерва до 21-10\n\n\n\n\n\n\nconst searchForm = document.querySelector('.js-search');\nconst addCountry = document.querySelector('.js-add');\nconst list = document.querySelector('.js-list');\nconst formContainer = document.querySelector('.js-form-container')\nconst markup = '<input type=\"text\" name=\"country\">'\naddCountry.addEventListener('click', handlerAddInput);\n\nfunction handlerAddInput() {\n    formContainer.insertAdjacentHTML('beforeend', markup)\n}\n\n\nsearchForm.addEventListener('submit', handlerForm);\n\n\nfunction handlerForm(evt) {\n    evt.preventDefault()\n    const data = new FormData(evt.currentTarget);\n    const arr = data.getAll('country').filter(item => item).map(item => item.trim())\n    getCountries(arr)\n        .then(async resp => {\n            const capitals = resp.map(({ capital }) => capital[0]);\n            const weatherService = await getWeather(capitals);\n            list.innerHTML = createMarkup(weatherService)\n        })\n        .catch(e => console.log(e))\n        .finally(() => {\n            formContainer.innerHTML = markup\n            searchForm.reset()\n        })\n}\n\n\nasync function getCountries(arr) {\n    const resps = arr.map(async item => {\n        const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`)\n        if (!resp.ok) {\n            throw new Error()\n        }\n\n        return resp.json()\n    })\n\n    const data = await Promise.allSettled(resps)\n    const countryObj = data.filter(({ status }) => status === \"fulfilled\").map(({ value }) => value[0]);\n\n    return countryObj;\n}\n\nasync function getWeather(arr) {\n    const BASE_URL = \"http://api.weatherapi.com/v1\";\n    const API_KEY = \"ce2cb9b2a3da414bb5b172546231704\";\n\n\n    const resps = arr.map(async city => {\n        const params = new URLSearchParams({\n            key: API_KEY,\n            q: city,\n            lang: 'uk'\n        });\n\n        const resp = await fetch(`${BASE_URL}/current.json?${params}`);\n\n        if (!resp.ok) {\n            throw new Error(resp.statusText);\n        }\n\n        return resp.json()\n    })\n\n    const data = await Promise.allSettled(resps)\n    const objs = data.filter(({ status }) => status === \"fulfilled\").map(({ value }) => value);\n\n    return objs\n}\n\n\nfunction createMarkup(arr) {\n    return arr.map(({ current: { temp_c, condition: { text, icon } }, location: { country, name } }) =>\n        `<li>\n    <div>\n        <h2>${country}</h2>\n        <h3>${name}</h3>\n    </div>\n    <img src=\"${icon}\" alt=\"${text}\">\n    <p>${text}</p>\n    <p>${temp_c}</p>\n</li>`).join('')\n}"],"names":["$d08887809f077fde$var$searchForm","document","querySelector","$d08887809f077fde$var$addCountry","$d08887809f077fde$var$list","$d08887809f077fde$var$formContainer","addEventListener","insertAdjacentHTML","evt","preventDefault","data","FormData","currentTarget","async","arr","resps","map","item","resp","fetch","ok","Error","json","Promise","allSettled","filter","status","value","$d08887809f077fde$var$getCountries","getAll","trim","then","capitals","capital","weatherService","BASE_URL","API_KEY","city","params","URLSearchParams","key","q","lang","statusText","$d08887809f077fde$var$getWeather","innerHTML","current","temp_c","condition","text","icon","location","country","name","join","$d08887809f077fde$var$createMarkup","catch","e","console","log","finally","reset"],"version":3,"file":"task-18.226794fd.js.map"}